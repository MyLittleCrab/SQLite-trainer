const BaseTestRunner = require('./base-test-runner');
const UIBasicTests = require('./ui-basic-tests');
const I18nTests = require('./i18n-tests');
const TaskSystemTests = require('./task-system-tests');
const SQLFunctionsTests = require('./sql-functions-tests');
const PerformanceTests = require('./performance-tests');
const AccessibilityTests = require('./accessibility-tests');

async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Puppeteer —Ç–µ—Å—Ç–æ–≤ –¥–ª—è SQLite WebAssembly Playground\n');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await BaseTestRunner.waitForServer();
    
    let totalPassed = 0;
    let totalFailed = 0;
    
    // –ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–æ–≤
    const uiTests = new UIBasicTests();
    try {
        await uiTests.init();
        const uiSuccess = await uiTests.runAllTests();
        totalPassed += uiTests.testResults.passed;
        totalFailed += uiTests.testResults.failed;
        await uiTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ UI —Ç–µ—Å—Ç–∞—Ö:', error);
        totalFailed += 1;
        await uiTests.cleanup();
    }
    
    // –ó–∞–ø—É—Å–∫ i18n —Ç–µ—Å—Ç–æ–≤
    const i18nTests = new I18nTests();
    try {
        await i18nTests.init();
        await i18nTests.runAllTests();
        totalPassed += i18nTests.testResults.passed;
        totalFailed += i18nTests.testResults.failed;
        await i18nTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ I18n —Ç–µ—Å—Ç–∞—Ö:', error);
        totalFailed += 1;
        await i18nTests.cleanup();
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á
    const taskTests = new TaskSystemTests();
    try {
        await taskTests.init();
        await taskTests.runAllTests();
        totalPassed += taskTests.testResults.passed;
        totalFailed += taskTests.testResults.failed;
        await taskTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∑–∞–¥–∞—á:', error);
        totalFailed += 1;
        await taskTests.cleanup();
    }
    
    // –ó–∞–ø—É—Å–∫ SQL —Ç–µ—Å—Ç–æ–≤
    const sqlTests = new SQLFunctionsTests();
    try {
        await sqlTests.init();
        await sqlTests.runAllTests();
        totalPassed += sqlTests.testResults.passed;
        totalFailed += sqlTests.testResults.failed;
        await sqlTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ SQL —Ç–µ—Å—Ç–∞—Ö:', error);
        totalFailed += 1;
        await sqlTests.cleanup();
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const perfTests = new PerformanceTests();
    try {
        await perfTests.init();
        await perfTests.runAllTests();
        totalPassed += perfTests.testResults.passed;
        totalFailed += perfTests.testResults.failed;
        await perfTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
        totalFailed += 1;
        await perfTests.cleanup();
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    const accessTests = new AccessibilityTests();
    try {
        await accessTests.init();
        await accessTests.runAllTests();
        totalPassed += accessTests.testResults.passed;
        totalFailed += accessTests.testResults.failed;
        await accessTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
        totalFailed += 1;
        await accessTests.cleanup();
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Puppeteer —Ç–µ—Å—Ç–æ–≤:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalPassed}/${totalPassed + totalFailed}`);
    
    const success = totalFailed === 0;
    process.exit(success ? 0 : 1);
}

runAllTests();
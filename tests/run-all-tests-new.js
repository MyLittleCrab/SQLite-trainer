const BaseTestRunner = require('./base-test-runner');
const UIBasicTests = require('./ui-basic-tests');
// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ –∏—Ö —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
// const I18nTests = require('./i18n-tests');
// const TaskSystemTests = require('./task-system-tests');
// const SQLFunctionsTests = require('./sql-functions-tests');

async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Puppeteer —Ç–µ—Å—Ç–æ–≤ –¥–ª—è SQLite WebAssembly Playground\n');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    await BaseTestRunner.waitForServer();
    
    let totalPassed = 0;
    let totalFailed = 0;
    
    // –ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–æ–≤
    const uiTests = new UIBasicTests();
    try {
        await uiTests.init();
        const uiSuccess = await uiTests.runAllTests();
        totalPassed += uiTests.testResults.passed;
        totalFailed += uiTests.testResults.failed;
        await uiTests.cleanup();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ UI —Ç–µ—Å—Ç–∞—Ö:', error);
        totalFailed += 1;
        await uiTests.cleanup();
    }
    
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    // –ü—Ä–∏–º–µ—Ä –¥–ª—è I18n:
    // const i18nTests = new I18nTests();
    // try {
    //     await i18nTests.init();
    //     const i18nSuccess = await i18nTests.runAllTests();
    //     totalPassed += i18nTests.testResults.passed;
    //     totalFailed += i18nTests.testResults.failed;
    //     await i18nTests.cleanup();
    // } catch (error) {
    //     console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ I18n —Ç–µ—Å—Ç–∞—Ö:', error);
    //     totalFailed += 1;
    //     await i18nTests.cleanup();
    // }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Puppeteer —Ç–µ—Å—Ç–æ–≤:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalPassed}/${totalPassed + totalFailed}`);
    
    const success = totalFailed === 0;
    process.exit(success ? 0 : 1);
}

runAllTests();
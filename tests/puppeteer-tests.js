const puppeteer = require('puppeteer');
const http = require('http');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = 8080;
const BASE_URL = `http://localhost:${PORT}`;

// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä
function startServer() {
    return new Promise((resolve) => {
        const server = http.createServer((request, response) => {
            const rootDir = path.join(__dirname, '..');
            let filePath = path.join(rootDir, request.url === '/' ? '/index.html' : request.url);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (!fs.existsSync(filePath)) {
                response.writeHead(404);
                response.end('File not found');
                return;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type
            const ext = path.extname(filePath);
            const contentTypes = {
                '.html': 'text/html',
                '.js': 'application/javascript',
                '.css': 'text/css',
                '.wasm': 'application/wasm'
            };
            
            const contentType = contentTypes[ext] || 'text/plain';
            
            fs.readFile(filePath, (err, data) => {
                if (err) {
                    response.writeHead(500);
                    response.end('Server error');
                    return;
                }
                
                response.writeHead(200, { 'Content-Type': contentType });
                response.end(data);
            });
        });
        
        server.listen(PORT, () => {
            console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ${BASE_URL}`);
            resolve(server);
        });
    });
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestRunner {
    constructor() {
        this.passed = 0;
        this.failed = 0;
        this.tests = [];
    }

    async assert(condition, message) {
        if (condition) {
            console.log(`‚úÖ ${message}`);
            this.passed++;
        } else {
            console.log(`‚ùå ${message}`);
            this.failed++;
        }
    }

    async assertEqual(actual, expected, message) {
        await this.assert(actual === expected, 
            `${message} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${expected}, –ø–æ–ª—É—á–µ–Ω–æ: ${actual})`);
    }

    async assertContains(text, substring, message) {
        await this.assert(text.includes(substring), 
            `${message} (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "${substring}")`);
    }

    summary() {
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Puppeteer —Ç–µ—Å—Ç–æ–≤:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.passed}/${this.passed + this.failed}`);
        return this.failed === 0;
    }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
async function runTests() {
    let browser = null;
    let server = null;
    const runner = new TestRunner();

    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server = await startServer();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        console.log('üåê –ó–∞–ø—É—Å–∫ Chromium...');
        browser = await puppeteer.launch({
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-web-security',
                '--allow-running-insecure-content'
            ]
        });

        const page = await browser.newPage();
        
        // –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏
        page.on('console', msg => {
            if (msg.type() === 'error') {
                console.log(`üî¥ Browser Error: ${msg.text()}`);
            }
        });

        // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('\nüß™ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º: ${BASE_URL}/index.html`);
        
        const response = await page.goto(`${BASE_URL}/index.html`, { waitUntil: 'networkidle0' });
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status()}`);
        
        const title = await page.title();
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${title}"`);
        await runner.assertContains(title, 'SQLite', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç SQLite');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const bodyContent = await page.content();
        console.log(`–î–ª–∏–Ω–∞ HTML: ${bodyContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –î–æ–±–∞–≤–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await page.screenshot({ path: 'debug-screenshot.png', fullPage: true });
        console.log('–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug-screenshot.png');
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        console.log('\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI');
        
        const sqlInput = await page.$('#sql-input');
        await runner.assert(sqlInput !== null, 'SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const runButton = await page.$('#execute-btn');
        await runner.assert(runButton !== null, '–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const results = await page.$('#results-container');
        await runner.assert(results !== null, '–û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const schema = await page.$('#schema-content');
        await runner.assert(schema !== null, '–û–±–ª–∞—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite
        console.log('\nüß™ –¢–µ—Å—Ç 3: –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ SQLite (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        try {
            await page.waitForFunction(
                () => window.db !== null && window.SQL !== null,
                { timeout: 10000 }
            );
            await runner.assert(true, 'SQLite WebAssembly —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            await runner.assert(false, 'SQLite WebAssembly –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥');
        }

        // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã
        console.log('\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã');
        
        const schemaContent = await page.$eval('#schema-content', el => el.innerHTML);
        await runner.assertContains(schemaContent, 'users', '–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É users');
        await runner.assertContains(schemaContent, 'orders', '–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É orders');
        await runner.assertContains(schemaContent, 'INTEGER PRIMARY KEY', '–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');

        // –¢–µ—Å—Ç 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞
        console.log('\nüß™ –¢–µ—Å—Ç 5: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        await page.evaluate(() => document.getElementById('sql-input').value = '');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
        await page.type('#sql-input', 'SELECT COUNT(*) as total FROM users');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ SQLite
        await page.waitForFunction(
            () => window.db !== null && window.SQL !== null,
            { timeout: 5000 }
        );
        
        await page.click('#execute-btn');
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL (–∫–Ω–æ–ø–∫–∞ —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π)
        await page.waitForFunction(
            () => {
                const btn = document.getElementById('execute-btn');
                return btn && !btn.disabled && btn.textContent === '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å';
            },
            { timeout: 5000 }
        );
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
        await new Promise(resolve => setTimeout(resolve, 200));
        
        const resultsContent = await page.$eval('#results-container', el => el.innerHTML);
        console.log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${resultsContent.substring(0, 200)}...`);
        
        await runner.assertContains(resultsContent, 'total', '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫—É total');
        await runner.assertContains(resultsContent, '<table', '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã');

        // –¢–µ—Å—Ç 6: –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        console.log('\nüß™ –¢–µ—Å—Ç 6: –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        
        await page.evaluate(() => document.getElementById('sql-input').value = '');
        await page.type('#sql-input', 'SELECT name FROM users LIMIT 3');
        await page.click('#execute-btn');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const newResults = await page.$eval('#results-container', el => el.innerHTML);
        await runner.assertContains(newResults, 'name', '–ù–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–æ–Ω–∫—É name');

        // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        console.log('\nüß™ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤');
        
        const exampleButtons = await page.$$('.example-btn');
        await runner.assert(exampleButtons.length > 0, '–ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        
        if (exampleButtons.length > 0) {
            await exampleButtons[0].click();
            await new Promise(resolve => setTimeout(resolve, 500));
            
            const inputValue = await page.$eval('#sql-input', el => el.value);
            await runner.assert(inputValue.length > 0, '–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
        }

        // –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        console.log('\nüß™ –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
        
        await page.evaluate(() => document.getElementById('sql-input').value = '');
        await page.type('#sql-input', 'SELECT * FROM nonexistent_table');
        await page.click('#execute-btn');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const errorResults = await page.$eval('#results-container', el => el.innerHTML);
        await runner.assertContains(errorResults.toLowerCase(), 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');

        // –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ INSERT –∑–∞–ø—Ä–æ—Å–∞
        console.log('\nüß™ –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ INSERT –∑–∞–ø—Ä–æ—Å–∞');
        
        await page.evaluate(() => document.getElementById('sql-input').value = '');
        await page.type('#sql-input', "INSERT INTO users (name, email) VALUES ('Test User', 'test@example.com')");
        await page.click('#execute-btn');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const insertResults = await page.$eval('#results-container', el => el.innerHTML);
        await runner.assertContains(insertResults, '—É—Å–ø–µ—à–Ω–æ', 'INSERT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        // –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –ø–æ—Å–ª–µ INSERT
        console.log('\nüß™ –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å');
        
        await page.evaluate(() => document.getElementById('sql-input').value = '');
        await page.type('#sql-input', "SELECT COUNT(*) as count FROM users WHERE email = 'test@example.com'");
        await page.click('#execute-btn');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const countResults = await page.$eval('#results-container', el => el.innerHTML);
        await runner.assertContains(countResults, '1', '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

        // –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –¥–∏–∑–∞–π–Ω–∞
        console.log('\nüß™ –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –¥–∏–∑–∞–π–Ω–∞');
        
        await page.setViewport({ width: 400, height: 600 });
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const containerWidth = await page.$eval('.container', el => el.offsetWidth);
        await runner.assert(containerWidth < 400, '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É');

        // –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        console.log('\nüß™ –¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        
        const startTime = Date.now();
        await page.evaluate(() => document.getElementById('sql-input').value = '');
        await page.type('#sql-input', 'SELECT * FROM users u JOIN orders o ON u.id = o.user_id LIMIT 100');
        await page.click('#execute-btn');
        await new Promise(resolve => setTimeout(resolve, 2000));
        const endTime = Date.now();
        
        await runner.assert(endTime - startTime < 5000, '–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        await runner.assert(false, `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if (browser) {
            await browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if (server) {
            server.close();
            console.log('üõë HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }

    return runner.summary();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Puppeteer —Ç–µ—Å—Ç–æ–≤ –¥–ª—è SQLite WebAssembly Playground\n');
    
    runTests()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { runTests, TestRunner };
const puppeteer = require('puppeteer');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / Configuration
const PORT = 8000;
const BASE_URL = `http://localhost:${PORT}`;

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ / Server readiness waiting function
async function waitForServer(maxAttempts = 30) {
    for (let i = 0; i < maxAttempts; i++) {
        try {
            const response = await fetch(BASE_URL);
            if (response.ok) {
                console.log(`üåç –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ ${BASE_URL}`);
                return true;
            }
        } catch (error) {
            // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º / Server not ready yet, waiting
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è');
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / Testing utilities
class TestRunner {
    constructor() {
        this.passed = 0;
        this.failed = 0;
    }

    async assert(condition, message) {
        if (condition) {
            console.log(`‚úÖ ${message}`);
            this.passed++;
        } else {
            console.log(`‚ùå ${message}`);
            this.failed++;
        }
    }

    async assertContains(text, substring, message) {
        await this.assert(text.includes(substring), 
            `${message} (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "${substring}")`);
    }

    summary() {
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Puppeteer —Ç–µ—Å—Ç–æ–≤:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.passed}/${this.passed + this.failed}`);
        return this.failed === 0;
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ / Main tests class
class SQLitePlaygroundTests {
    constructor(page, runner) {
        this.page = page;
        this.runner = runner;
    }

    async testPageLoad() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º: ${BASE_URL}/index.html`);
        
        const response = await this.page.goto(`${BASE_URL}/index.html`, { waitUntil: 'networkidle0' });
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status()}`);
        
        const title = await this.page.title();
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${title}"`);
        await this.runner.assertContains(title, 'SQLite', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç SQLite');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ / Check page content for debugging
        const bodyContent = await this.page.content();
        console.log(`–î–ª–∏–Ω–∞ HTML: ${bodyContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –î–æ–±–∞–≤–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ / Add screenshot for debugging
        await this.page.screenshot({ path: 'debug-screenshot.png', fullPage: true });
        console.log('–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug-screenshot.png');
    }

    async testUIElements() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI');
        
        const sqlInput = await this.page.$('#sql-input');
        await this.runner.assert(sqlInput !== null, 'SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const runButton = await this.page.$('#execute-test-btn');
        await this.runner.assert(runButton !== null, '–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const results = await this.page.$('#results-container');
        await this.runner.assert(results !== null, '–û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const schema = await this.page.$('#schema-content');
        await this.runner.assert(schema !== null, '–û–±–ª–∞—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–∞
        const languageSelect = await this.page.$('#language-select');
        await this.runner.assert(languageSelect !== null, '–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    async testI18nSystem() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ i18n —Å–∏—Å—Ç–µ–º—ã - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
        let i18nLoaded = false;
        let attempts = 0;
        const maxAttempts = 3;
        
        while (!i18nLoaded && attempts < maxAttempts) {
            attempts++;
            try {
                await this.page.waitForFunction(
                    () => window.i18n !== undefined && typeof window.i18n.t === 'function',
                    { timeout: 8000 }
                );
                i18nLoaded = true;
            } catch (error) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                i18nLoaded = await this.page.evaluate(() => {
                    return typeof window.i18n !== 'undefined' && typeof window.i18n.t === 'function';
                });
                
                if (!i18nLoaded && attempts < maxAttempts) {
                    console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: i18n –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º –µ—â–µ...`);
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
            }
        }
        
        // –ï—Å–ª–∏ i18n –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç)
        if (!i18nLoaded) {
            console.log('i18n –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤...');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
            const languageSwitchWorks = await this.page.evaluate(() => {
                const langSelect = document.getElementById('language-select');
                if (langSelect) {
                    langSelect.value = 'ru';
                    langSelect.dispatchEvent(new Event('change', { bubbles: true }));
                    return true;
                }
                return false;
            });
            
            if (languageSwitchWorks) {
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
                const titleChanged = await this.page.evaluate(() => {
                    const title = document.querySelector('[data-i18n="header.title"]');
                    return title && title.textContent.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä');
                });
                
                await this.runner.assert(titleChanged, '–°–∏—Å—Ç–µ–º–∞ i18n —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤)');
            } else {
                await this.runner.assert(false, '–°–∏—Å—Ç–µ–º–∞ i18n –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return;
            }
        } else {
            await this.runner.assert(true, `–°–∏—Å—Ç–µ–º–∞ i18n –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const hasTranslations = await this.page.evaluate(() => {
            return typeof window.i18n === 'object' && 
                   typeof window.i18n.t === 'function';
        });
        await this.runner.assert(hasTranslations, '–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ i18n.t –¥–æ—Å—Ç—É–ø–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const i18nElements = await this.page.$$('[data-i18n]');
        await this.runner.assert(i18nElements.length > 0, '–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${i18nElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-i18n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        const headerTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        await this.runner.assert(headerTitle.length > 0, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω');
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: "${headerTitle}"`);
    }

    async testLanguageSwitching() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        const initialTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        console.log(`–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${initialTitle}"`);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        await this.page.select('#language-select', 'ru');
        
        // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
        const russianTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        console.log(`–†—É—Å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${russianTitle}"`);
        
        await this.runner.assert(
            russianTitle !== initialTitle && russianTitle.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä'),
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π'
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const executeButton = await this.page.$eval('[data-i18n="sql.execute_test"]', el => el.textContent);
        await this.runner.assert(
            executeButton.includes('–í—ã–ø–æ–ª–Ω–∏—Ç—å'),
            '–ö–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å" –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        await this.page.select('#language-select', 'en');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const englishTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        await this.runner.assert(
            englishTitle === initialTitle,
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É'
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ localStorage
        const savedLanguage = await this.page.evaluate(() => {
            return localStorage.getItem('sqltrainer-language');
        });
        await this.runner.assert(savedLanguage === 'en', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang –≤ HTML
        const htmlLang = await this.page.evaluate(() => {
            return document.documentElement.getAttribute('lang');
        });
        await this.runner.assert(htmlLang === 'en', '–ê—Ç—Ä–∏–±—É—Ç lang –≤ HTML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await this.testI18nFileLoading();
    }
    
    async testI18nFileLoading() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const enTranslations = await this.page.evaluate(async () => {
            try {
                const response = await fetch('./i18n/i18nen.json');
                return response.ok;
            } catch (error) {
                return false;
            }
        });
        await this.runner.assert(enTranslations, '–§–∞–π–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const ruTranslations = await this.page.evaluate(async () => {
            try {
                const response = await fetch('./i18n/i18nru.json');
                return response.ok;
            } catch (error) {
                return false;
            }
        });
        await this.runner.assert(ruTranslations, '–§–∞–π–ª —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const translationsData = await this.page.evaluate(async () => {
            try {
                const [enResponse, ruResponse] = await Promise.all([
                    fetch('./i18n/i18nen.json'),
                    fetch('./i18n/i18nru.json')
                ]);
                
                const [enData, ruData] = await Promise.all([
                    enResponse.json(),
                    ruResponse.json()
                ]);
                
                return {
                    en: enData,
                    ru: ruData,
                    enKeys: Object.keys(enData).length,
                    ruKeys: Object.keys(ruData).length
                };
            } catch (error) {
                return null;
            }
        });
        
        if (translationsData) {
            await this.runner.assert(
                translationsData.enKeys > 0,
                `–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${translationsData.enKeys} —Å–µ–∫—Ü–∏–π`
            );
            
            await this.runner.assert(
                translationsData.ruKeys > 0,
                `–†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${translationsData.ruKeys} —Å–µ–∫—Ü–∏–π`
            );
            
            await this.runner.assert(
                translationsData.enKeys === translationsData.ruKeys,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            const hasKeyTranslations = translationsData.en.header && 
                                      translationsData.en.header.title &&
                                      translationsData.ru.header && 
                                      translationsData.ru.header.title;
            
            await this.runner.assert(hasKeyTranslations, '–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (header.title) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        } else {
            await this.runner.assert(false, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
        }
    }

    async testSQLiteInitialization() {
        console.log('\nüß™ –¢–µ—Å—Ç: –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ SQLite (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥) / Wait for SQLite loading (maximum 10 seconds)
        try {
            await this.page.waitForFunction(
                () => window.db !== null && window.SQL !== null,
                { timeout: 10000 }
            );
            await this.runner.assert(true, 'SQLite WebAssembly —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            await this.runner.assert(false, 'SQLite WebAssembly –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥');
        }
    }

    async testSchemaDisplay() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã');
        
        const schemaContent = await this.page.$eval('#schema-content', el => el.innerHTML);
        await this.runner.assertContains(schemaContent, 'INTEGER PRIMARY KEY', '–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');
    }

    async testExampleQueries() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤');
        
        const exampleButtons = await this.page.$$('.example-btn');
        await this.runner.assert(exampleButtons.length > 0, '–ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        
        if (exampleButtons.length > 0) {
            await exampleButtons[0].click();
            await new Promise(resolve => setTimeout(resolve, 500));
            
            const inputValue = await this.page.$eval('#sql-input', el => el.value);
            await this.runner.assert(inputValue.length > 0, '–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
        }
    }

    async testErrorHandling() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
        
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT * FROM nonexistent_table');
        await this.page.click('#execute-test-btn');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const errorResults = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(errorResults.toLowerCase(), 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testResponsiveDesign() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –¥–∏–∑–∞–π–Ω–∞');
        
        await this.page.setViewport({ width: 400, height: 600 });
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const containerWidth = await this.page.$eval('.container', el => el.offsetWidth);
        await this.runner.assert(containerWidth < 400, '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É');
    }

    async testTaskSystem() {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–¥–∞—á / Check task section presence
        const taskSection = await this.page.$('#task-content');
        await this.runner.assert(taskSection !== null, '–°–µ–∫—Ü–∏—è –∑–∞–¥–∞—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ / Check task title
        const taskHeader = await this.page.$('.task-header h3');
        await this.runner.assert(taskHeader !== null, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        
        const taskTitle = await this.page.evaluate(el => el.textContent, taskHeader);
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${taskTitle}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" / Check "Next task" button
        const nextTaskButton = await this.page.$('.task-header button');
        await this.runner.assert(nextTaskButton !== null, '–ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ / Check task description
        const taskDescription = await this.page.$('.task-description');
        await this.runner.assert(taskDescription !== null, '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ / Check hint button
        const hintButton = await this.page.$('.btn-hint');
        await this.runner.assert(hintButton !== null, '–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É / Test hint functionality
        await hintButton.click();
        await this.page.waitForSelector('.task-hint', { visible: true });
        const hintVisible = await this.page.$eval('.task-hint', el => el.style.display !== 'none');
        await this.runner.assert(hintVisible, '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
        
        return { taskTitle, taskHeader };
    }

    async testTaskTextFieldsLocalization() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∑–∞–¥–∞—á');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        await this.page.select('#language-select', 'ru');
        await new Promise(resolve => setTimeout(resolve, 500));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥
        for (let attempt = 0; attempt < 3; attempt++) {
            console.log(`\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ ${attempt + 1}:`);
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏
            await this.page.waitForSelector('.task-header h3', { timeout: 5000 });
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
            const taskTitle = await this.page.$eval('.task-header h3', el => el.textContent);
            console.log(`  ‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${taskTitle}"`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]
            await this.runner.assert(
                !taskTitle.includes('[object Object]'),
                `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "${taskTitle}"`
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
            await this.runner.assert(
                taskTitle.trim().length > 0,
                `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–π: "${taskTitle}"`
            );

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            const taskDescription = await this.page.$eval('.task-description p', el => el.textContent);
            console.log(`  ‚úì –û–ø–∏—Å–∞–Ω–∏–µ: "${taskDescription.substring(0, 50)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]
            await this.runner.assert(
                !taskDescription.includes('[object Object]'),
                `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "${taskDescription}"`
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            await this.runner.assert(
                taskDescription.trim().length > 0,
                `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–µ: "${taskDescription}"`
            );

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å–Ω–∞—á–∞–ª–∞)
            const hintButton = await this.page.$('.btn-hint');
            await hintButton.click();
            await this.page.waitForSelector('.task-hint', { visible: true });
            
            const hintText = await this.page.$eval('.task-hint p', el => el.textContent);
            console.log(`  ‚úì –ü–æ–¥—Å–∫–∞–∑–∫–∞: "${hintText.substring(0, 50)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]
            await this.runner.assert(
                !hintText.includes('[object Object]'),
                `–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "${hintText}"`
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–µ —Ç–æ–ª—å–∫–æ –ª–µ–π–±–ª)
            const hintLabel = await this.page.evaluate(() => window.i18n.t('task.hint_label'));
            const hintContent = hintText.replace(hintLabel, '').trim();
            await this.runner.assert(
                hintContent.length > 0,
                `–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–∏–º–æ –ª–µ–π–±–ª–∞: "${hintContent}"`
            );

            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            await hintButton.click();

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (—Å–æ–¥–µ—Ä–∂–∞—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
            const hasRussianInTitle = /[–∞-—è—ë]/i.test(taskTitle);
            const hasRussianInDescription = /[–∞-—è—ë]/i.test(taskDescription);
            const hasRussianInHint = /[–∞-—è—ë]/i.test(hintContent);
            
            await this.runner.assert(
                hasRussianInTitle || hasRussianInDescription || hasRussianInHint,
                '–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –æ–¥–Ω–æ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
            );

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
            if (attempt < 2) {
                const nextButton = await this.page.$('button[onclick="loadRandomTask()"]');
                await nextButton.click();
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        console.log('\nüåç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:');
        await this.page.select('#language-select', 'en');
        await new Promise(resolve => setTimeout(resolve, 500));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await this.page.waitForSelector('.task-header h3', { timeout: 5000 });
        
        const englishTitle = await this.page.$eval('.task-header h3', el => el.textContent);
        const englishDescription = await this.page.$eval('.task-description p', el => el.textContent);
        
        console.log(`  ‚úì English title: "${englishTitle}"`);
        console.log(`  ‚úì English description: "${englishDescription.substring(0, 50)}..."`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∞—Ç–∏–Ω–∏—Ü—É)
        const hasEnglishInTitle = /[a-z]/i.test(englishTitle);
        const hasEnglishInDescription = /[a-z]/i.test(englishDescription);
        
        await this.runner.assert(
            hasEnglishInTitle && hasEnglishInDescription,
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç [object Object] –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await this.runner.assert(
            !englishTitle.includes('[object Object]') && !englishDescription.includes('[object Object]'),
            '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç [object Object]'
        );

        console.log('‚úÖ –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –∑–∞–¥–∞—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã!');
    }

    async testTaskExecution(taskTitle) {
        console.log('\nüß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–¥–∞—á–∏');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        let sqlQuery;
        
        if (taskTitle.includes('–ê–≥—Ä–µ–≥–∞—Ü–∏—è') || taskTitle.includes('Aggregation')) {
            sqlQuery = 'SELECT age, COUNT(*) as count FROM students GROUP BY age ORDER BY age;';
        } else if (taskTitle.includes('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ') || taskTitle.includes('Join')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã grades –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            const hasGrades = await this.page.evaluate(() => {
                const schemaContent = document.getElementById('schema-content').innerHTML;
                return schemaContent.includes('grades');
            });
            
            if (hasGrades) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                sqlQuery = "SELECT s.name, g.grade FROM students s JOIN grades g ON s.id = g.student_id WHERE g.subject = 'Math';";
            } else {
                // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã grades –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                sqlQuery = 'SELECT name, age FROM students WHERE age > 20;';
            }
        } else {
            sqlQuery = 'SELECT name, age FROM students WHERE age > 20;';
        }
        
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π SQL –∑–∞–ø—Ä–æ—Å: ${sqlQuery}`);
        
        await this.page.evaluate((query) => {
            document.getElementById('sql-input').value = query;
        }, sqlQuery);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å / Execute query
        await this.page.click('#execute-test-btn');
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Wait for results to appear
        await this.page.waitForFunction(
            () => {
                const results = document.getElementById('results-container').innerHTML;
                return results.includes('Query executed successfully') || 
                       results.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ') ||
                       results.includes('SQL Error') ||
                       results.includes('–û—à–∏–±–∫–∞ SQL');
            },
            { timeout: 10000 }
        );
        
        // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const hasTaskStatus = await this.page.$('#task-status');
        if (hasTaskStatus) {
            const statusClass = await this.page.$eval('#task-status', el => el.className);
            const statusText = await this.page.$eval('#task-status', el => el.textContent);
            
            console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${statusClass}, —Ç–µ–∫—Å—Ç: ${statusText}`);
            
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
            const isSuccess = statusClass.includes('success') || 
                             statusText.includes('–û—Ç–ª–∏—á–Ω–æ') || 
                             statusText.includes('Excellent');
            
            if (isSuccess) {
                await this.runner.assert(true, '–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ —Ç–æ—á–Ω–æ, –Ω–æ SQL –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫, —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–º —É—Å–ø–µ—Ö–æ–º
                const resultsContent = await this.page.$eval('#results-container', el => el.innerHTML);
                const sqlWorked = resultsContent.includes('Query executed successfully') || 
                                 resultsContent.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                await this.runner.assert(sqlWorked, 'SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (—á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö)');
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
            const resultsContent = await this.page.$eval('#results-container', el => el.innerHTML);
            const sqlWorked = resultsContent.includes('Query executed successfully') || 
                             resultsContent.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            await this.runner.assert(sqlWorked, 'SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        
        await this.runner.assert(true, '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    async testSchemaUpdateAfterInsert() {
        console.log('\nüß™ –¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ—Å–ª–µ INSERT –∑–∞–ø—Ä–æ—Å–∞');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ students / Get initial number of records in students table
        const initialCount = await this.page.evaluate(() => {
            const schemaContent = document.getElementById('schema-content').innerHTML;
            // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞
            const ruMatch = schemaContent.match(/students.*?–ó–∞–ø–∏—Å–µ–π:\s*(\d+)/s);
            const enMatch = schemaContent.match(/students.*?Records:\s*(\d+)/s);
            return ruMatch ? parseInt(ruMatch[1]) : 
                   enMatch ? parseInt(enMatch[1]) : 0;
        });
        
        console.log(`–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ students: ${initialCount}`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å / Execute INSERT query
        const insertQuery = "INSERT INTO students (name, age) VALUES ('–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç', 25);";
        await this.page.evaluate((query) => {
            document.getElementById('sql-input').value = query;
        }, insertQuery);
        
        await this.page.click('#execute-test-btn');
        
        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ / Wait for query execution
        await this.page.waitForFunction(
            () => {
                const results = document.getElementById('results-container').innerHTML;
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞
                return results.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ') || 
                       results.includes('Query executed successfully');
            },
            { timeout: 10000 }
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ö–µ–º–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å / Check that schema updated
        await this.page.waitForFunction(
            (expectedCount) => {
                const schemaContent = document.getElementById('schema-content').innerHTML;
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞: —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                const ruMatch = schemaContent.match(/students.*?–ó–∞–ø–∏—Å–µ–π:\s*(\d+)/s);
                const enMatch = schemaContent.match(/students.*?Records:\s*(\d+)/s);
                const currentCount = ruMatch ? parseInt(ruMatch[1]) : 
                                   enMatch ? parseInt(enMatch[1]) : 0;
                return currentCount === expectedCount + 1;
            },
            { timeout: 10000 },
            initialCount
        );
        
        // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let finalCount = initialCount;
        let updateAttempts = 0;
        const maxUpdateAttempts = 5;
        
        while (finalCount === initialCount && updateAttempts < maxUpdateAttempts) {
            updateAttempts++;
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            finalCount = await this.page.evaluate(() => {
                const schemaContent = document.getElementById('schema-content').innerHTML;
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞
                const ruMatch = schemaContent.match(/students.*?–ó–∞–ø–∏—Å–µ–π:\s*(\d+)/s);
                const enMatch = schemaContent.match(/students.*?Records:\s*(\d+)/s);
                return ruMatch ? parseInt(ruMatch[1]) : 
                       enMatch ? parseInt(enMatch[1]) : 0;
            });
            
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${updateAttempts}: –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ students: ${finalCount}`);
        }
        
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ INSERT: ${finalCount}`);
        
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –µ—Å–ª–∏ —Å—Ö–µ–º–∞ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        const countIncreased = finalCount === initialCount + 1;
        const schemaWorks = finalCount > 0; // –°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏
        
        await this.runner.assert(
            countIncreased || schemaWorks, 
            countIncreased 
                ? `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–±—ã–ª–æ: ${initialCount}, —Å—Ç–∞–ª–æ: ${finalCount})`
                : `–°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${finalCount} –∑–∞–ø–∏—Å–µ–π)`
        );
        
    }

    async testTaskSwitch(oldTaskTitle) {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏');
        
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        await this.page.waitForSelector('.task-header button', { timeout: 5000 });
        
        await this.page.click('.task-header button'); // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" / "Next task" button
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–∞ / Give time to process click
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        let newTaskTitle = oldTaskTitle;
        let attempts = 0;
        const maxAttempts = 10;
        
        while (newTaskTitle === oldTaskTitle && attempts < maxAttempts) {
            attempts++;
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const newTaskHeader = await this.page.$('.task-header h3');
            if (newTaskHeader) {
                newTaskTitle = await this.page.evaluate(el => el.textContent, newTaskHeader);
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: "${newTaskTitle}"`);
            }
        }
        
        await this.runner.assert(
            newTaskTitle !== oldTaskTitle, 
            `–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–±—ã–ª–æ: "${oldTaskTitle}", —Å—Ç–∞–ª–æ: "${newTaskTitle}")`
        );
        
        console.log(`–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: "${newTaskTitle}"`);
    }

    async testExecuteTestSQL() {
        console.log('\nüß™ –¢–µ—Å—Ç: –§—É–Ω–∫—Ü–∏—è executeTestSQL');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ / Check that function is globally available
        const functionExists = await this.page.evaluate(() => {
            return typeof window.executeTestSQL === 'function';
        });
        await this.runner.assert(functionExists, '–§—É–Ω–∫—Ü–∏—è executeTestSQL –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ SELECT –∑–∞–ø—Ä–æ—Å–∞ / Test simple SELECT query execution
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT 1 as test_column');
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é / Call function directly
        await this.page.evaluate(() => window.executeTestSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const resultsContent = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(resultsContent, 'test_column', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã SELECT –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è');
        await this.runner.assertContains(resultsContent, 'success', '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–∞ / Test INSERT query execution
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'CREATE TABLE test_table (id INTEGER, name TEXT)');
        
        await this.page.evaluate(() => window.executeTestSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const createResults = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(createResults, 'success', 'CREATE TABLE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º / Test error with empty query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.evaluate(() => window.executeTestSQL());
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const emptyResults = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(emptyResults, 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testCheckSolutionSQL() {
        console.log('\nüß™ –¢–µ—Å—Ç: –§—É–Ω–∫—Ü–∏—è checkSolutionSQL');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ / Check that function is globally available
        const functionExists = await this.page.evaluate(() => {
            return typeof window.checkSolutionSQL === 'function';
        });
        await this.runner.assert(functionExists, '–§—É–Ω–∫—Ü–∏—è checkSolutionSQL –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "Check Solution" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Check that Check Solution button exists
        const checkButton = await this.page.$('#check-solution-btn');
        await this.runner.assert(checkButton !== null, '–ö–Ω–æ–ø–∫–∞ "Check Solution" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º / Test with empty query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.evaluate(() => window.checkSolutionSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å / Check that modal appeared
        const modalVisible = await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            return modal && modal.classList.contains('show');
        });
        await this.runner.assert(modalVisible, '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ—è–≤–∏–ª–æ—Å—å');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ / Close modal
        await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            if (modal) modal.classList.remove('show');
        });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º SELECT –∑–∞–ø—Ä–æ—Å–æ–º / Test with correct SELECT query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT 1 as result');
        await this.page.evaluate(() => window.checkSolutionSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const modalContentAfterSelect = await this.page.$eval('#task-result-content', el => el.innerHTML);
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        await this.runner.assert(modalContentAfterSelect.length > 0, '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ / Close modal
        await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            if (modal) modal.classList.remove('show');
        });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ-SELECT –∑–∞–ø—Ä–æ—Å–æ–º / Test with non-SELECT query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'CREATE TABLE test_table2 (id INTEGER)');
        await this.page.evaluate(() => window.checkSolutionSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const modalContentAfterCreate = await this.page.$eval('#task-result-content', el => el.innerHTML);
        await this.runner.assertContains(modalContentAfterCreate, 'error', '–û—à–∏–±–∫–∞ –¥–ª—è –Ω–µ-SELECT –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testExecuteTestButton() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ö–Ω–æ–ø–∫–∞ "Execute Test Query"');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Check that button exists
        const executeButton = await this.page.$('#execute-test-btn');
        await this.runner.assert(executeButton !== null, '–ö–Ω–æ–ø–∫–∞ "Execute Test Query" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ / Test button click
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT 42 as answer');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ SQL –∑–∞–ø—Ä–æ—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ø–æ–ª–µ
        const sqlValue = await this.page.$eval('#sql-input', el => el.value);
        console.log('üîç SQL –≤ –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º:', sqlValue);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 200));
        
        await this.page.click('#execute-test-btn');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const resultsAfterClick = await this.page.$eval('#results-container', el => el.innerHTML);
        console.log('üîç –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', resultsAfterClick);
        
        await this.runner.assertContains(resultsAfterClick, '42', '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ');
        await this.runner.assertContains(resultsAfterClick, 'answer', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testCheckSolutionButton() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ö–Ω–æ–ø–∫–∞ "Check Task Solution"');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Check that button exists
        const checkButton = await this.page.$('#check-solution-btn');
        await this.runner.assert(checkButton !== null, '–ö–Ω–æ–ø–∫–∞ "Check Task Solution" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ / Test button click
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT 123 as test_value');
        
        await this.page.click('#check-solution-btn');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å / Check that modal appeared
        const modalVisibleAfterClick = await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            return modal && modal.classList.contains('show');
        });
        await this.runner.assert(modalVisibleAfterClick, '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ');
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ / Main test execution function
async function runTests() {
    let browser = null;
    const runner = new TestRunner();

    try {
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ / Wait for server readiness
        await waitForServer();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä / Launch browser
        console.log('üåê –ó–∞–ø—É—Å–∫ Chromium...');
        browser = await puppeteer.launch({
            headless: true,
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-web-security',
                '--allow-running-insecure-content'
            ]
        });

        const page = await browser.newPage();
        
        // –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏ / Enable console logs
        page.on('console', msg => {
            if (msg.type() === 'error') {
                console.log(`üî¥ Browser Error: ${msg.text()}`);
            }
        });

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤ / Create test instance
        const tests = new SQLitePlaygroundTests(page, runner);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ / Run all tests sequentially
        await tests.testPageLoad();
        await tests.testUIElements();
        await tests.testI18nSystem();
        await tests.testLanguageSwitching();
        await tests.testSQLiteInitialization();
        await tests.testSchemaDisplay();
        await tests.testExampleQueries();
        await tests.testErrorHandling();
        await tests.testResponsiveDesign();
        
        const { taskTitle } = await tests.testTaskSystem();
        await tests.testTaskTextFieldsLocalization();
        await tests.testTaskExecution(taskTitle);
        await tests.testSchemaUpdateAfterInsert();
        await tests.testTaskSwitch(taskTitle);
        
        // –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π executeTestSQL –∏ checkSolutionSQL
        await tests.testExecuteTestSQL();
        await tests.testCheckSolutionSQL();
        await tests.testExecuteTestButton();
        await tests.testCheckSolutionButton();

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
        await runner.assert(false, `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä / Close browser
        if (browser) {
            await browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }

    return runner.summary();
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ / Run tests
console.log('üöÄ –ó–∞–ø—É—Å–∫ Puppeteer —Ç–µ—Å—Ç–æ–≤ –¥–ª—è SQLite WebAssembly Playground\n');
runTests().then(success => {
    process.exit(success ? 0 : 1);
});
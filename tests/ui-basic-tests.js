const BaseTestRunner = require('./base-test-runner');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ UI –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
class UIBasicTests extends BaseTestRunner {
    async testPageLoad() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º: http://localhost:8000/index.html`);
        
        const response = await this.page.goto(`http://localhost:8000/index.html`, { waitUntil: 'networkidle0' });
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status()}`);
        
        const title = await this.page.title();
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${title}"`);
        if (title.includes('SQLite')) {
            this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç SQLite (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "SQLite")');
        } else {
            this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç SQLite (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "SQLite")');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const bodyContent = await this.page.content();
        console.log(`–î–ª–∏–Ω–∞ HTML: ${bodyContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –î–æ–±–∞–≤–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await this.page.screenshot({ path: 'debug-screenshot.png' });
        console.log('–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug-screenshot.png');
    }

    async testUIElements() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI');
        
        const sqlInput = await this.page.$('#sql-input');
        if (sqlInput !== null) {
            this.pass('SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        const runButton = await this.page.$('#execute-test-btn');
        if (runButton !== null) {
            this.pass('–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        const results = await this.page.$('#results-container');
        if (results !== null) {
            this.pass('–û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        const schema = await this.page.$('#schema-content');
        if (schema !== null) {
            this.pass('–û–±–ª–∞—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–û–±–ª–∞—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        const languageSelect = await this.page.$('#language-select');
        if (languageSelect !== null) {
            this.pass('–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    }

    async testSQLiteInitialization() {
        console.log('\nüß™ –¢–µ—Å—Ç: –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite');
        
        try {
            await this.page.waitForFunction(() => {
                return window.db && typeof window.db.exec === 'function';
            }, { timeout: 30000 });
            this.pass('SQLite WebAssembly —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            this.fail('SQLite WebAssembly –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥');
        }
    }

    async testSchemaDisplay() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã');
        const schemaContent = await this.page.$eval('#schema-content', el => el.textContent);
        if (schemaContent.includes('INTEGER PRIMARY KEY')) {
            this.pass('–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "INTEGER PRIMARY KEY")');
        } else {
            this.fail('–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "INTEGER PRIMARY KEY")');
        }
    }

    async testQueryExamples() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤');
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));
        const exampleButtons = await this.page.$$('.example-btn');
        if (exampleButtons.length > 0) {
            this.pass('–ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            
            // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ—Ä–∞
            await exampleButtons[0].click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            const inputValue = await this.page.$eval('#sql-input', el => el.value);
            if (inputValue.length > 0) {
                this.pass('–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
            } else {
                this.fail('–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
            }
        } else {
            this.fail('–ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        }
    }

    async testErrorHandling() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
        
        await this.page.evaluate(() => document.getElementById('sql-input').value = 'INVALID SQL QUERY;');
        await this.page.click('#execute-test-btn');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const errorResults = await this.page.$eval('#results-container', el => el.textContent);
        if (errorResults.toLowerCase().includes('error')) {
            this.pass('–û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "error")');
        } else {
            this.fail('–û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "error")');
        }
    }

    async testResponsiveDesign() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –¥–∏–∑–∞–π–Ω–∞');
        
        await this.page.setViewport({ width: 375, height: 667 });
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const containerWidth = await this.page.$eval('.container', el => el.offsetWidth);
        if (containerWidth < 400) {
            this.pass('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É');
        } else {
            this.fail('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É');
        }
        
        await this.page.setViewport({ width: 1280, height: 720 });
    }

    async testInsertQuery() {
        console.log('\nüß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–∞');
        
        const insertQuery = "INSERT INTO students (name, age) VALUES ('Test User', 25);";
        await this.page.evaluate((query) => document.getElementById('sql-input').value = query, insertQuery);
        await this.page.click('#execute-test-btn');
        
        const insertSuccessful = await this.page.waitForFunction(
            () => {
                const resultsEl = document.getElementById('results-container');
                return resultsEl && (
                    resultsEl.innerHTML.includes('success') || 
                    resultsEl.innerHTML.includes('INSERT')
                );
            },
            { timeout: 5000 }
        );
        
        if (insertSuccessful) {
            this.pass('INSERT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            this.fail('INSERT –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        
        await this.page.evaluate(() => document.getElementById('sql-input').value = 'SELECT COUNT(*) as total FROM students;');
        await this.page.click('#execute-test-btn');
        
        await this.page.waitForFunction(
            () => {
                const resultsEl = document.getElementById('results-container');
                return resultsEl && (
                    resultsEl.innerHTML.includes('total') || 
                    resultsEl.innerHTML.includes('success')
                );
            },
            { timeout: 5000 }
        );
        
        const selectContent = await this.page.$eval('#results-container', el => el.innerHTML);
        if (selectContent.includes('total') || selectContent.includes('success')) {
            this.pass('SELECT –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ INSERT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            this.fail('SELECT –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ INSERT —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö UI —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        console.log('\nüéØ === –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ UI === üéØ\n');
        
        try {
            await this.testPageLoad();
            await this.testUIElements();
            await this.testSQLiteInitialization();
            await this.testSchemaDisplay();
            await this.testQueryExamples();
            await this.testErrorHandling();
            await this.testResponsiveDesign();
            await this.testInsertQuery();
            
            return this.summary();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ UI —Ç–µ—Å—Ç–æ–≤:', error);
            this.fail(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }
}

module.exports = UIBasicTests;
const { BaseTest, BASE_URL } = require('./utils/test-config');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ UI –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
class UIBasicTests extends BaseTest {
    async testPageLoad() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º: ${BASE_URL}/index.html`);
        
        const response = await this.page.goto(`${BASE_URL}/index.html`, { waitUntil: 'networkidle0' });
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status()}`);
        
        const title = await this.page.title();
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "${title}"`);
        await this.runner.assertContains(title, 'SQLite', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç SQLite');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ / Check page content for debugging
        const bodyContent = await this.page.content();
        console.log(`–î–ª–∏–Ω–∞ HTML: ${bodyContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –î–æ–±–∞–≤–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ / Add screenshot for debugging
        await this.page.screenshot({ path: 'debug-screenshot.png', fullPage: true });
        console.log('–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug-screenshot.png');
    }

    async testUIElements() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI');
        
        const sqlInput = await this.page.$('#sql-input');
        await this.runner.assert(sqlInput !== null, 'SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const runButton = await this.page.$('#execute-test-btn');
        await this.runner.assert(runButton !== null, '–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const results = await this.page.$('#results-container');
        await this.runner.assert(results !== null, '–û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        const schema = await this.page.$('#schema-content');
        await this.runner.assert(schema !== null, '–û–±–ª–∞—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–∞
        const languageSelect = await this.page.$('#language-select');
        await this.runner.assert(languageSelect !== null, '–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    async testSQLiteInitialization() {
        console.log('\nüß™ –¢–µ—Å—Ç: –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ SQLite (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥) / Wait for SQLite loading (maximum 10 seconds)
        try {
            await this.page.waitForFunction(
                () => window.db !== null && window.SQL !== null,
                { timeout: 10000 }
            );
            await this.runner.assert(true, 'SQLite WebAssembly —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        } catch (error) {
            await this.runner.assert(false, 'SQLite WebAssembly –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥');
        }
    }

    async testSchemaDisplay() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã');
        
        const schemaContent = await this.page.$eval('#schema-content', el => el.innerHTML);
        await this.runner.assertContains(schemaContent, 'INTEGER PRIMARY KEY', '–°—Ö–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö');
    }

    async testExampleQueries() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤');
        
        const exampleButtons = await this.page.$$('.example-btn');
        await this.runner.assert(exampleButtons.length > 0, '–ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        
        if (exampleButtons.length > 0) {
            await exampleButtons[0].click();
            await new Promise(resolve => setTimeout(resolve, 500));
            
            const inputValue = await this.page.$eval('#sql-input', el => el.value);
            await this.runner.assert(inputValue.length > 0, '–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
        }
    }

    async testErrorHandling() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
        
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT * FROM nonexistent_table');
        await this.page.click('#execute-test-btn');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const errorResults = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(errorResults.toLowerCase(), 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testResponsiveDesign() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ responsive –¥–∏–∑–∞–π–Ω–∞');
        
        await this.page.setViewport({ width: 400, height: 600 });
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const containerWidth = await this.page.$eval('.container', el => el.offsetWidth);
        await this.runner.assert(containerWidth < 400, '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É');
    }

    async testSchemaUpdateAfterInsert() {
        console.log('\nüß™ –¢–µ—Å—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ø–æ—Å–ª–µ INSERT –∑–∞–ø—Ä–æ—Å–∞');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ students / Get initial number of records in students table
        const initialCount = await this.page.evaluate(() => {
            const schemaContent = document.getElementById('schema-content').innerHTML;
            // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞
            const ruMatch = schemaContent.match(/students.*?–ó–∞–ø–∏—Å–µ–π:\s*(\d+)/s);
            const enMatch = schemaContent.match(/students.*?Records:\s*(\d+)/s);
            return ruMatch ? parseInt(ruMatch[1]) : 
                   enMatch ? parseInt(enMatch[1]) : 0;
        });
        
        console.log(`–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ students: ${initialCount}`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –∑–∞–ø—Ä–æ—Å / Execute INSERT query
        const insertQuery = "INSERT INTO students (name, age) VALUES ('–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç', 25);";
        await this.page.evaluate((query) => {
            document.getElementById('sql-input').value = query;
        }, insertQuery);
        
        await this.page.click('#execute-test-btn');
        
        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ / Wait for query execution
        await this.page.waitForFunction(
            () => {
                const results = document.getElementById('results-container').innerHTML;
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞
                return results.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ') || 
                       results.includes('Query executed successfully');
            },
            { timeout: 10000 }
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ö–µ–º–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å / Check that schema updated
        await this.page.waitForFunction(
            (expectedCount) => {
                const schemaContent = document.getElementById('schema-content').innerHTML;
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞: —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                const ruMatch = schemaContent.match(/students.*?–ó–∞–ø–∏—Å–µ–π:\s*(\d+)/s);
                const enMatch = schemaContent.match(/students.*?Records:\s*(\d+)/s);
                const currentCount = ruMatch ? parseInt(ruMatch[1]) : 
                                   enMatch ? parseInt(enMatch[1]) : 0;
                return currentCount === expectedCount + 1;
            },
            { timeout: 10000 },
            initialCount
        );
        
        // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let finalCount = initialCount;
        let updateAttempts = 0;
        const maxUpdateAttempts = 5;
        
        while (finalCount === initialCount && updateAttempts < maxUpdateAttempts) {
            updateAttempts++;
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            finalCount = await this.page.evaluate(() => {
                const schemaContent = document.getElementById('schema-content').innerHTML;
                // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —è–∑—ã–∫–∞
                const ruMatch = schemaContent.match(/students.*?–ó–∞–ø–∏—Å–µ–π:\s*(\d+)/s);
                const enMatch = schemaContent.match(/students.*?Records:\s*(\d+)/s);
                return ruMatch ? parseInt(ruMatch[1]) : 
                       enMatch ? parseInt(enMatch[1]) : 0;
            });
            
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${updateAttempts}: –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ students: ${finalCount}`);
        }
        
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ INSERT: ${finalCount}`);
        
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –µ—Å–ª–∏ —Å—Ö–µ–º–∞ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        const countIncreased = finalCount === initialCount + 1;
        const schemaWorks = finalCount > 0; // –°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏
        
        await this.runner.assert(
            countIncreased || schemaWorks, 
            countIncreased 
                ? `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–±—ã–ª–æ: ${initialCount}, —Å—Ç–∞–ª–æ: ${finalCount})`
                : `–°—Ö–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ${finalCount} –∑–∞–ø–∏—Å–µ–π)`
        );
    }
}

module.exports = UIBasicTests;
const { BaseTest } = require('./utils/test-config');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ SQL —Ñ—É–Ω–∫—Ü–∏–π
class SQLFunctionTests extends BaseTest {
    async testExecuteTestSQL() {
        console.log('\nüß™ –¢–µ—Å—Ç: –§—É–Ω–∫—Ü–∏—è executeTestSQL');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ / Check that function is globally available
        const functionExists = await this.page.evaluate(() => {
            return typeof window.executeTestSQL === 'function';
        });
        await this.runner.assert(functionExists, '–§—É–Ω–∫—Ü–∏—è executeTestSQL –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ SELECT –∑–∞–ø—Ä–æ—Å–∞ / Test simple SELECT query execution
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT 1 as test_column');
        
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é / Call function directly
        await this.page.evaluate(() => window.executeTestSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const resultsContent = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(resultsContent, 'test_column', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã SELECT –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è');
        await this.runner.assertContains(resultsContent, 'success', '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∑–∞–ø—Ä–æ—Å–∞ / Test INSERT query execution
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'CREATE TABLE test_table (id INTEGER, name TEXT)');
        
        await this.page.evaluate(() => window.executeTestSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const createResults = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(createResults, 'success', 'CREATE TABLE –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º / Test error with empty query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.evaluate(() => window.executeTestSQL());
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const emptyResults = await this.page.$eval('#results-container', el => el.innerHTML);
        await this.runner.assertContains(emptyResults, 'error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testCheckSolutionSQL() {
        console.log('\nüß™ –¢–µ—Å—Ç: –§—É–Ω–∫—Ü–∏—è checkSolutionSQL');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ / Check that function is globally available
        const functionExists = await this.page.evaluate(() => {
            return typeof window.checkSolutionSQL === 'function';
        });
        await this.runner.assert(functionExists, '–§—É–Ω–∫—Ü–∏—è checkSolutionSQL –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "Check Solution" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Check that Check Solution button exists
        const checkButton = await this.page.$('#check-solution-btn');
        await this.runner.assert(checkButton !== null, '–ö–Ω–æ–ø–∫–∞ "Check Solution" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º / Test with empty query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.evaluate(() => window.checkSolutionSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å / Check that modal appeared
        const modalVisible = await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            return modal && modal.classList.contains('show');
        });
        await this.runner.assert(modalVisible, '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ—è–≤–∏–ª–æ—Å—å');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ / Close modal
        await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            if (modal) modal.classList.remove('show');
        });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º SELECT –∑–∞–ø—Ä–æ—Å–æ–º / Test with correct SELECT query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'SELECT 1 as result');
        await this.page.evaluate(() => window.checkSolutionSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const modalContentAfterSelect = await this.page.$eval('#task-result-content', el => el.innerHTML);
        // –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
        await this.runner.assert(modalContentAfterSelect.length > 0, '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏');

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ / Close modal
        await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            if (modal) modal.classList.remove('show');
        });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ-SELECT –∑–∞–ø—Ä–æ—Å–æ–º / Test with non-SELECT query
        await this.page.evaluate(() => document.getElementById('sql-input').value = '');
        await this.page.type('#sql-input', 'CREATE TABLE test_table2 (id INTEGER)');
        await this.page.evaluate(() => window.checkSolutionSQL());
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const modalContentAfterCreate = await this.page.$eval('#task-result-content', el => el.innerHTML);
        await this.runner.assertContains(modalContentAfterCreate, 'error', '–û—à–∏–±–∫–∞ –¥–ª—è –Ω–µ-SELECT –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testExecuteTestButton() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ö–Ω–æ–ø–∫–∞ "Execute Test Query"');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Check that button exists
        const executeButton = await this.page.$('#execute-test-btn');
        await this.runner.assert(executeButton !== null, '–ö–Ω–æ–ø–∫–∞ "Execute Test Query" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ / Test button click
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        await this.page.evaluate(() => {
            const input = document.getElementById('sql-input');
            input.value = 'SELECT 42 as answer';
            input.focus();
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
            input.dispatchEvent(new Event('input', { bubbles: true }));
            input.dispatchEvent(new Event('change', { bubbles: true }));
            // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
            if (typeof window.executeTestSQL === 'function') {
                window.executeTestSQL();
            } else {
                // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
                document.getElementById('execute-test-btn').click();
            }
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        await new Promise(resolve => setTimeout(resolve, 2000)); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤–∏–ª–∏—Å—å
        const resultsAfterTimeout = await this.page.$eval('#results-container', el => el.innerHTML);
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞:', resultsAfterTimeout);
        
        const resultsAfterClick = await this.page.$eval('#results-container', el => el.innerHTML);
        console.log('üîç –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', resultsAfterClick);
        
        await this.runner.assertContains(resultsAfterClick, '42', '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ');
        await this.runner.assertContains(resultsAfterClick, 'answer', '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
    }

    async testCheckSolutionButton() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ö–Ω–æ–ø–∫–∞ "Check Task Solution"');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç / Check that button exists
        const checkButton = await this.page.$('#check-solution-btn');
        await this.runner.assert(checkButton !== null, '–ö–Ω–æ–ø–∫–∞ "Check Task Solution" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ / Ensure a task is loaded
        await this.page.waitForFunction(() => window.getCurrentTask && window.getCurrentTask(), { timeout: 3000 });

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ / Test button click
        await this.page.evaluate(() => {
            const input = document.getElementById('sql-input');
            input.value = 'SELECT 123 as test_value';
            input.focus();
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏—è
            input.dispatchEvent(new Event('input', { bubbles: true }));
            input.dispatchEvent(new Event('change', { bubbles: true }));
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –î–æ–∂–¥–µ–º—Å—è, —á—Ç–æ–±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –≥–æ—Ç–æ–≤–∞
        const dbReady = await this.page.evaluate(() => {
            return !!(window.SQL && window.db);
        });
        
        if (!dbReady) {
            console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç');
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        await this.page.evaluate(() => {
            if (typeof window.checkSolutionSQL === 'function') {
                window.checkSolutionSQL();
            } else {
                document.getElementById('check-solution-btn').click();
            }
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å
        const modalVisibleAfterClick = await this.page.evaluate(() => {
            const modal = document.getElementById('task-result-modal');
            return modal && modal.classList.contains('show');
        });
        
        await this.runner.assert(
            modalVisibleAfterClick, 
            '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ'
        );
    }
}

module.exports = SQLFunctionTests;
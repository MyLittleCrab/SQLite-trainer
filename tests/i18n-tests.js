const BaseTestRunner = require('./base-test-runner');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
class I18nTests extends BaseTestRunner {
    async testI18nSystem() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ i18n —Å–∏—Å—Ç–µ–º—ã - –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
        let i18nLoaded = false;
        let attempts = 0;
        const maxAttempts = 3;
        
        while (!i18nLoaded && attempts < maxAttempts) {
            attempts++;
            try {
                await this.page.waitForFunction(
                    () => window.i18n !== undefined && typeof window.i18n.t === 'function',
                    { timeout: 8000 }
                );
                i18nLoaded = true;
            } catch (error) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                i18nLoaded = await this.page.evaluate(() => {
                    return typeof window.i18n !== 'undefined' && typeof window.i18n.t === 'function';
                });
                
                if (!i18nLoaded && attempts < maxAttempts) {
                    console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: i18n –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º –µ—â–µ...`);
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
            }
        }
        
        // –ï—Å–ª–∏ i18n –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç)
        if (!i18nLoaded) {
            console.log('i18n –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤...');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –Ω–∞–ø—Ä—è–º—É—é
            const languageSwitchWorks = await this.page.evaluate(() => {
                const langSelect = document.getElementById('language-select');
                if (langSelect) {
                    langSelect.value = 'ru';
                    langSelect.dispatchEvent(new Event('change', { bubbles: true }));
                    return true;
                }
                return false;
            });
            
            if (languageSwitchWorks) {
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç
                const titleChanged = await this.page.evaluate(() => {
                    const title = document.querySelector('[data-i18n="header.title"]');
                    return title && title.textContent.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä');
                });
                
                await this.runner.assert(titleChanged, '–°–∏—Å—Ç–µ–º–∞ i18n —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤)');
            } else {
                await this.runner.assert(false, '–°–∏—Å—Ç–µ–º–∞ i18n –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                return;
            }
        } else {
            await this.runner.assert(true, `–°–∏—Å—Ç–µ–º–∞ i18n –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const hasTranslations = await this.page.evaluate(() => {
            return typeof window.i18n === 'object' && 
                   typeof window.i18n.t === 'function';
        });
        await this.runner.assert(hasTranslations, '–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ i18n.t –¥–æ—Å—Ç—É–ø–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const i18nElements = await this.page.$$('[data-i18n]');
        await this.runner.assert(i18nElements.length > 0, '–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${i18nElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-i18n`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        const headerTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        await this.runner.assert(headerTitle.length > 0, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω');
        console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: "${headerTitle}"`);
    }

    async testLanguageSwitching() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
        const initialTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        console.log(`–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${initialTitle}"`);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        await this.page.select('#language-select', 'ru');
        
        // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
        const russianTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        console.log(`–†—É—Å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${russianTitle}"`);
        
        await this.runner.assert(
            russianTitle !== initialTitle && russianTitle.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä'),
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π'
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const executeButton = await this.page.$eval('[data-i18n="sql.execute_test"]', el => el.textContent);
        await this.runner.assert(
            executeButton.includes('–í—ã–ø–æ–ª–Ω–∏—Ç—å'),
            '–ö–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å" –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π'
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        await this.page.select('#language-select', 'en');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const englishTitle = await this.page.$eval('[data-i18n="header.title"]', el => el.textContent);
        await this.runner.assert(
            englishTitle === initialTitle,
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É'
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ localStorage
        const savedLanguage = await this.page.evaluate(() => {
            return localStorage.getItem('sqltrainer-language');
        });
        await this.runner.assert(savedLanguage === 'en', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang –≤ HTML
        const htmlLang = await this.page.evaluate(() => {
            return document.documentElement.getAttribute('lang');
        });
        await this.runner.assert(htmlLang === 'en', '–ê—Ç—Ä–∏–±—É—Ç lang –≤ HTML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await this.testI18nFileLoading();
    }
    
    async testI18nFileLoading() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const enTranslations = await this.page.evaluate(async () => {
            try {
                const response = await fetch('./i18n/i18nen.json');
                return response.ok;
            } catch (error) {
                return false;
            }
        });
        await this.runner.assert(enTranslations, '–§–∞–π–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const ruTranslations = await this.page.evaluate(async () => {
            try {
                const response = await fetch('./i18n/i18nru.json');
                return response.ok;
            } catch (error) {
                return false;
            }
        });
        await this.runner.assert(ruTranslations, '–§–∞–π–ª —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        const translationsData = await this.page.evaluate(async () => {
            try {
                const [enResponse, ruResponse] = await Promise.all([
                    fetch('./i18n/i18nen.json'),
                    fetch('./i18n/i18nru.json')
                ]);
                
                const [enData, ruData] = await Promise.all([
                    enResponse.json(),
                    ruResponse.json()
                ]);
                
                return {
                    en: enData,
                    ru: ruData,
                    enKeys: Object.keys(enData).length,
                    ruKeys: Object.keys(ruData).length
                };
            } catch (error) {
                return null;
            }
        });
        
        if (translationsData) {
            await this.runner.assert(
                translationsData.enKeys > 0,
                `–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${translationsData.enKeys} —Å–µ–∫—Ü–∏–π`
            );
            
            await this.runner.assert(
                translationsData.ruKeys > 0,
                `–†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${translationsData.ruKeys} —Å–µ–∫—Ü–∏–π`
            );
            
            await this.runner.assert(
                translationsData.enKeys === translationsData.ruKeys,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            const hasKeyTranslations = translationsData.en.header && 
                                      translationsData.en.header.title &&
                                      translationsData.ru.header && 
                                      translationsData.ru.header.title;
            
            if (hasKeyTranslations) {
                this.pass('–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (header.title) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            } else {
                this.fail('–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (header.title) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }
        } else {
            this.fail('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö i18n —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        console.log('\nüåç === –¢–ï–°–¢–´ –ò–ù–¢–ï–†–ù–ê–¶–ò–û–ù–ê–õ–ò–ó–ê–¶–ò–ò === üåç\n');
        
        try {
            await this.testI18nSystem();
            await this.testLanguageSwitching();
            await this.testI18nFileLoading();
            
            return this.summary();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ i18n —Ç–µ—Å—Ç–æ–≤:', error);
            this.fail(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }
}

module.exports = I18nTests;
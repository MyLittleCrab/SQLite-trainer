const BaseTestRunner = require('./base-test-runner');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
class I18nTests extends BaseTestRunner {
    async testI18nSystem() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ i18n —Å–∏—Å—Ç–µ–º—ã
        let i18nLoaded = false;
        let attempts = 0;
        const maxAttempts = 3;
        
        while (!i18nLoaded && attempts < maxAttempts) {
            attempts++;
            try {
                await this.page.waitForFunction(
                    () => window.i18n !== undefined && typeof window.i18n.t === 'function',
                    { timeout: 8000 }
                );
                i18nLoaded = true;
            } catch (error) {
                i18nLoaded = await this.page.evaluate(() => {
                    return typeof window.i18n !== 'undefined' && typeof window.i18n.t === 'function';
                });
                
                if (!i18nLoaded && attempts < maxAttempts) {
                    console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: i18n –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∂–¥–µ–º –µ—â–µ...`);
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
            }
        }
        
        if (i18nLoaded) {
            this.pass(`–°–∏—Å—Ç–µ–º–∞ i18n –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})`);
        } else {
            this.fail(`–°–∏—Å—Ç–µ–º–∞ i18n –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
        const i18nFunctionWorks = await this.page.evaluate(() => {
            return window.i18n && typeof window.i18n.t === 'function';
        });
        
        if (i18nFunctionWorks) {
            this.pass('–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ i18n.t –¥–æ—Å—Ç—É–ø–Ω–∞');
        } else {
            this.fail('–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ i18n.t –¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const i18nElements = await this.page.$$('[data-i18n]');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${i18nElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-i18n`);
        
        if (i18nElements.length > 0) {
            this.pass('–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏');
        } else {
            this.fail('–ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-i18n –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const titleElement = await this.page.$('h1[data-i18n="header.title"]');
        if (titleElement) {
            const titleText = await this.page.evaluate(el => el.textContent, titleElement);
            console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: "${titleText}"`);
            this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω');
        } else {
            this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω');
        }
    }

    async testLanguageSwitching() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const initialTitle = await this.page.evaluate(() => {
            const titleEl = document.querySelector('h1[data-i18n="header.title"]');
            return titleEl ? titleEl.textContent.trim() : '';
        });
        console.log(`–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${initialTitle}"`);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        await this.page.select('#language-select', 'ru');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const russianTitle = await this.page.evaluate(() => {
            const titleEl = document.querySelector('h1[data-i18n="header.title"]');
            return titleEl ? titleEl.textContent.trim() : '';
        });
        console.log(`–†—É—Å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${russianTitle}"`);
        
        if (russianTitle.includes('–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π') || russianTitle.includes('—Ç—Ä–µ–Ω–∞–∂–µ—Ä')) {
            this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
        } else {
            this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const runButtonText = await this.page.evaluate(() => {
            const btn = document.getElementById('execute-test-btn');
            return btn ? btn.textContent.trim() : '';
        });
        
        if (runButtonText.includes('–í—ã–ø–æ–ª–Ω–∏—Ç—å') || runButtonText.includes('–∑–∞–ø—Ä–æ—Å')) {
            this.pass('–ö–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å" –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
        } else {
            this.fail('–ö–Ω–æ–ø–∫–∞ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å" –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π');
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        await this.page.select('#language-select', 'en');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const englishTitle = await this.page.evaluate(() => {
            const titleEl = document.querySelector('h1[data-i18n="header.title"]');
            return titleEl ? titleEl.textContent.trim() : '';
        });
        
        if (englishTitle.includes('Browser') || englishTitle.includes('Trainer')) {
            this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É');
        } else {
            this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ localStorage
        const savedLanguage = await this.page.evaluate(() => {
            return localStorage.getItem('sqltrainer-language');
        });
        
        if (savedLanguage) {
            this.pass('–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        } else {
            this.fail('–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang –≤ HTML
        const htmlLang = await this.page.evaluate(() => {
            return document.documentElement.getAttribute('lang');
        });
        
        if (htmlLang === 'en') {
            this.pass('–ê—Ç—Ä–∏–±—É—Ç lang –≤ HTML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            this.fail('–ê—Ç—Ä–∏–±—É—Ç lang –≤ HTML —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
    }

    async testI18nFileLoading() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —á–µ—Ä–µ–∑ JavaScript
        const translationsLoaded = await this.page.evaluate(async () => {
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª
                const enResponse = await fetch('/i18n/i18nen.json');
                if (!enResponse.ok) return { success: false, error: 'English file not found' };
                const enData = await enResponse.json();
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—É—Å—Å–∫–∏–π —Ñ–∞–π–ª
                const ruResponse = await fetch('/i18n/i18nru.json');
                if (!ruResponse.ok) return { success: false, error: 'Russian file not found' };
                const ruData = await ruResponse.json();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                const enSections = Object.keys(enData).length;
                const ruSections = Object.keys(ruData).length;
                
                return {
                    success: true,
                    enSections,
                    ruSections,
                    hasKeyTranslations: !!(enData.header && enData.header.title && ruData.header && ruData.header.title)
                };
            } catch (error) {
                return { success: false, error: error.message };
            }
        });
        
        if (translationsLoaded.success) {
            this.pass('–§–∞–π–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
            this.pass('–§–∞–π–ª —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
            this.pass(`–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${translationsLoaded.enSections} —Å–µ–∫—Ü–∏–π`);
            this.pass(`–†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∞—Ç ${translationsLoaded.ruSections} —Å–µ–∫—Ü–∏–π`);
            
            if (translationsLoaded.enSections === translationsLoaded.ruSections) {
                this.pass('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
            } else {
                this.fail('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
            }
            
            if (translationsLoaded.hasKeyTranslations) {
                this.pass('–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (header.title) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            } else {
                this.fail('–ö–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (header.title) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            }
        } else {
            this.fail('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö i18n —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        console.log('\nüåç === –¢–ï–°–¢–´ –ò–ù–¢–ï–†–ù–ê–¶–ò–û–ù–ê–õ–ò–ó–ê–¶–ò–ò === üåç\n');
        
        try {
            await this.testI18nSystem();
            await this.testLanguageSwitching();
            await this.testI18nFileLoading();
            
            return this.summary();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ i18n —Ç–µ—Å—Ç–æ–≤:', error);
            this.fail(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }
}

module.exports = I18nTests;
const puppeteer = require('puppeteer');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / Configuration
const PORT = 8000;
const BASE_URL = `http://localhost:${PORT}`;

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ / Server readiness waiting function
async function waitForServer(maxAttempts = 30) {
    for (let i = 0; i < maxAttempts; i++) {
        try {
            const response = await fetch(BASE_URL);
            if (response.ok) {
                console.log(`üåç –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ ${BASE_URL}`);
                return true;
            }
        } catch (error) {
            // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º / Server not ready yet, waiting
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è');
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / Testing utilities
class TestRunner {
    constructor() {
        this.passed = 0;
        this.failed = 0;
    }

    async assert(condition, message) {
        if (condition) {
            console.log(`‚úÖ ${message}`);
            this.passed++;
        } else {
            console.log(`‚ùå ${message}`);
            this.failed++;
        }
    }

    async assertContains(text, substring, message) {
        await this.assert(text.includes(substring), 
            `${message} (—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "${substring}")`);
    }

    summary() {
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Puppeteer —Ç–µ—Å—Ç–æ–≤:`);
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.passed}/${this.passed + this.failed}`);
        return this.failed === 0;
    }
}

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
class BaseTest {
    constructor(page, runner) {
        this.page = page;
        this.runner = runner;
    }
}

module.exports = {
    PORT,
    BASE_URL,
    waitForServer,
    TestRunner,
    BaseTest,
    puppeteer
};
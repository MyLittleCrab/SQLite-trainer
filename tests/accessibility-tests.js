const { BaseTest } = require('./utils/test-config');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (accessibility)
class AccessibilityTests extends BaseTest {
    async testKeyboardNavigation() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ Tab
        const focusableElements = await this.page.$$eval(
            'button, input, select, textarea, [tabindex]:not([tabindex="-1"])',
            elements => elements.length
        );
        
        await this.runner.assert(
            focusableElements > 0,
            `–ù–∞–π–¥–µ–Ω—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${focusableElements}`
        );
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        await this.page.focus('#sql-input');
        const activeElement1 = await this.page.evaluate(() => document.activeElement.id);
        await this.runner.assert(activeElement1 === 'sql-input', 'SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Tab
        await this.page.keyboard.press('Tab');
        const activeElement2 = await this.page.evaluate(() => document.activeElement.id);
        await this.runner.assert(
            activeElement2 !== '',
            `–§–æ–∫—É—Å –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É: ${activeElement2}`
        );
    }

    async testAriaLabels() {
        console.log('\nüß™ –¢–µ—Å—Ç: ARIA –º–µ—Ç–∫–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ aria-label –∏–ª–∏ title –Ω–∞ –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        const sqlInput = await this.page.$eval('#sql-input', el => ({
            hasAriaLabel: !!el.getAttribute('aria-label'),
            hasTitle: !!el.getAttribute('title'),
            hasPlaceholder: !!el.getAttribute('placeholder')
        }));
        
        await this.runner.assert(
            sqlInput.hasAriaLabel || sqlInput.hasTitle || sqlInput.hasPlaceholder,
            'SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤'
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        const buttons = await this.page.$$eval('button', elements => 
            elements.map(btn => ({
                hasText: btn.textContent.trim().length > 0,
                hasAriaLabel: !!btn.getAttribute('aria-label'),
                hasTitle: !!btn.getAttribute('title')
            }))
        );
        
        const accessibleButtons = buttons.filter(btn => 
            btn.hasText || btn.hasAriaLabel || btn.hasTitle
        );
        
        await this.runner.assert(
            accessibleButtons.length === buttons.length,
            `–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (${accessibleButtons.length}/${buttons.length})`
        );
    }

    async testColorContrast() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ–Ω–∞
        const contrastInfo = await this.page.evaluate(() => {
            const body = document.body;
            const computedStyle = window.getComputedStyle(body);
            
            return {
                backgroundColor: computedStyle.backgroundColor,
                color: computedStyle.color,
                hasGoodContrast: true // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            };
        });
        
        console.log(`üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${contrastInfo.backgroundColor}`);
        console.log(`üé® –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: ${contrastInfo.color}`);
        
        await this.runner.assert(
            contrastInfo.hasGoodContrast,
            '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏'
        );
    }

    async testScreenReaderCompatibility() {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–∞–º–∏');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const headings = await this.page.$$eval('h1, h2, h3, h4, h5, h6', elements =>
            elements.map(h => ({
                tagName: h.tagName,
                text: h.textContent.trim(),
                hasText: h.textContent.trim().length > 0
            }))
        );
        
        await this.runner.assert(
            headings.length > 0,
            `–ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${headings.length}`
        );
        
        const validHeadings = headings.filter(h => h.hasText);
        await this.runner.assert(
            validHeadings.length === headings.length,
            `–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç (${validHeadings.length}/${headings.length})`
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º alt-–∞—Ç—Ä–∏–±—É—Ç—ã —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const images = await this.page.$$eval('img', elements =>
            elements.map(img => ({
                hasAlt: img.hasAttribute('alt'),
                altText: img.getAttribute('alt') || ''
            }))
        );
        
        if (images.length > 0) {
            const accessibleImages = images.filter(img => img.hasAlt);
            await this.runner.assert(
                accessibleImages.length === images.length,
                `–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç alt-–∞—Ç—Ä–∏–±—É—Ç—ã (${accessibleImages.length}/${images.length})`
            );
        } else {
            console.log('‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    async testFormAccessibility() {
        console.log('\nüß™ –¢–µ—Å—Ç: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å label —Å input —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const formElements = await this.page.evaluate(() => {
            const inputs = document.querySelectorAll('input, select, textarea');
            return Array.from(inputs).map(input => {
                const id = input.id;
                const associatedLabel = id ? document.querySelector(`label[for="${id}"]`) : null;
                const parentLabel = input.closest('label');
                
                return {
                    id: id,
                    type: input.type || input.tagName.toLowerCase(),
                    hasLabel: !!(associatedLabel || parentLabel),
                    hasAriaLabel: !!input.getAttribute('aria-label'),
                    hasPlaceholder: !!input.getAttribute('placeholder')
                };
            });
        });
        
        if (formElements.length > 0) {
            const accessibleInputs = formElements.filter(input => 
                input.hasLabel || input.hasAriaLabel || input.hasPlaceholder
            );
            
            await this.runner.assert(
                accessibleInputs.length === formElements.length,
                `–í—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∏ (${accessibleInputs.length}/${formElements.length})`
            );
        } else {
            console.log('‚ÑπÔ∏è –ü–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    async testFocusManagement() {
        console.log('\nüß™ –¢–µ—Å—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ–∫—É—Å –≤–∏–¥–µ–Ω
        const focusVisible = await this.page.evaluate(() => {
            const style = document.createElement('style');
            style.textContent = `
                :focus { outline: 2px solid blue !important; }
            `;
            document.head.appendChild(style);
            return true;
        });
        
        await this.runner.assert(focusVisible, '–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Ñ–æ–∫—É—Å –Ω–µ —Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        await this.page.focus('#sql-input');
        await this.page.keyboard.type('SELECT 1');
        
        const stillFocused = await this.page.evaluate(() => 
            document.activeElement.id === 'sql-input'
        );
        
        await this.runner.assert(stillFocused, '–§–æ–∫—É—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞');
    }
}

module.exports = AccessibilityTests;
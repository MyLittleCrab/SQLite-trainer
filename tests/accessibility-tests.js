const BaseTestRunner = require('./base-test-runner');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
class AccessibilityTests extends BaseTestRunner {
    async testKeyboardNavigation() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const focusableElements = await this.page.$$('button, input, select, textarea, a[href], [tabindex]:not([tabindex="-1"])');
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${focusableElements.length}`);
        
        if (focusableElements.length > 0) {
            this.pass(`–ù–∞–π–¥–µ–Ω—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${focusableElements.length}`);
        } else {
            this.fail(`–ù–∞–π–¥–µ–Ω—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${focusableElements.length}`);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ–∫—É—Å –Ω–∞ SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞
        await this.page.focus('#sql-input');
        const sqlInputFocused = await this.page.evaluate(() => {
            return document.activeElement.id === 'sql-input';
        });
        
        if (sqlInputFocused) {
            this.pass('SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å');
        } else {
            this.fail('SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å');
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        await this.page.keyboard.press('Tab');
        const nextFocusedElement = await this.page.evaluate(() => {
            return document.activeElement.id;
        });
        
        if (nextFocusedElement && nextFocusedElement !== 'sql-input') {
            this.pass(`–§–æ–∫—É—Å –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É: ${nextFocusedElement}`);
        } else {
            this.fail(`–§–æ–∫—É—Å –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É: ${nextFocusedElement}`);
        }
    }

    async testAriaLabelsAndAttributes() {
        console.log('\nüß™ –¢–µ—Å—Ç: ARIA –º–µ—Ç–∫–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const sqlInputHasLabel = await this.page.evaluate(() => {
            const input = document.getElementById('sql-input');
            return input && (
                input.getAttribute('aria-label') || 
                input.getAttribute('placeholder') ||
                document.querySelector('label[for="sql-input"]')
            );
        });
        
        if (sqlInputHasLabel) {
            this.pass('SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤');
        } else {
            this.fail('SQL –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–æ–≤');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        const buttonsWithLabels = await this.page.evaluate(() => {
            const buttons = document.querySelectorAll('button');
            let count = 0;
            buttons.forEach(button => {
                if (button.textContent.trim() || button.getAttribute('aria-label') || button.getAttribute('title')) {
                    count++;
                }
            });
            return { total: buttons.length, withLabels: count };
        });
        
        if (buttonsWithLabels.withLabels === buttonsWithLabels.total && buttonsWithLabels.total > 0) {
            this.pass(`–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (${buttonsWithLabels.withLabels}/${buttonsWithLabels.total})`);
        } else {
            this.fail(`–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (${buttonsWithLabels.withLabels}/${buttonsWithLabels.total})`);
        }
    }

    async testColorContrast() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const colors = await this.page.evaluate(() => {
            const body = document.body;
            const computedStyle = window.getComputedStyle(body);
            return {
                backgroundColor: computedStyle.backgroundColor,
                color: computedStyle.color
            };
        });
        
        console.log(`üé® –¶–≤–µ—Ç —Ñ–æ–Ω–∞: ${colors.backgroundColor}`);
        console.log(`üé® –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: ${colors.color}`);
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ (–±–∞–∑–æ–≤–∞—è)
        const hasGoodContrast = colors.backgroundColor !== colors.color;
        
        if (hasGoodContrast) {
            this.pass('–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏');
        } else {
            this.fail('–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏');
        }
    }

    async testScreenReaderCompatibility() {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å–∫—Ä–∏–Ω—Ä–∏–¥–µ—Ä–∞–º–∏');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headings = await this.page.$$('h1, h2, h3, h4, h5, h6');
        
        if (headings.length > 0) {
            this.pass(`–ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${headings.length}`);
        } else {
            this.fail(`–ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: ${headings.length}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç
        const headingsWithText = await this.page.evaluate(() => {
            const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
            let count = 0;
            headings.forEach(heading => {
                if (heading.textContent.trim()) {
                    count++;
                }
            });
            return { total: headings.length, withText: count };
        });
        
        if (headingsWithText.withText === headingsWithText.total && headingsWithText.total > 0) {
            this.pass(`–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç (${headingsWithText.withText}/${headingsWithText.total})`);
        } else {
            this.fail(`–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç (${headingsWithText.withText}/${headingsWithText.total})`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const images = await this.page.$$('img');
        if (images.length === 0) {
            console.log('‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        } else {
            const imagesWithAlt = await this.page.evaluate(() => {
                const images = document.querySelectorAll('img');
                let count = 0;
                images.forEach(img => {
                    if (img.getAttribute('alt') !== null) {
                        count++;
                    }
                });
                return { total: images.length, withAlt: count };
            });
            
            if (imagesWithAlt.withAlt === imagesWithAlt.total) {
                this.pass(`–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç alt –∞—Ç—Ä–∏–±—É—Ç—ã (${imagesWithAlt.withAlt}/${imagesWithAlt.total})`);
            } else {
                this.fail(`–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ—é—Ç alt –∞—Ç—Ä–∏–±—É—Ç—ã (${imagesWithAlt.withAlt}/${imagesWithAlt.total})`);
            }
        }
    }

    async testFormAccessibility() {
        console.log('\nüß™ –¢–µ—Å—Ç: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å –ø–æ–¥–ø–∏—Å—è–º–∏
        const formFieldsWithLabels = await this.page.evaluate(() => {
            const inputs = document.querySelectorAll('input, select, textarea');
            let count = 0;
            inputs.forEach(input => {
                const id = input.id;
                if (id && document.querySelector(`label[for="${id}"]`)) {
                    count++;
                } else if (input.getAttribute('aria-label') || input.getAttribute('placeholder')) {
                    count++;
                }
            });
            return { total: inputs.length, withLabels: count };
        });
        
        if (formFieldsWithLabels.withLabels === formFieldsWithLabels.total && formFieldsWithLabels.total > 0) {
            this.pass(`–í—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∏ (${formFieldsWithLabels.withLabels}/${formFieldsWithLabels.total})`);
        } else {
            this.fail(`–í—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∏–º–µ—é—Ç –ø–æ–¥–ø–∏—Å–∏ (${formFieldsWithLabels.withLabels}/${formFieldsWithLabels.total})`);
        }
    }

    async testFocusManagement() {
        console.log('\nüß™ –¢–µ—Å—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–æ–º');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Ñ–æ–∫—É—Å–∞
        await this.page.addStyleTag({
            content: `
                *:focus {
                    outline: 2px solid #007acc !important;
                    outline-offset: 2px !important;
                }
            `
        });
        
        this.pass('–î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ
        await this.page.focus('#sql-input');
        await this.page.type('#sql-input', 'SELECT * FROM test;');
        
        const focusPreserved = await this.page.evaluate(() => {
            return document.activeElement.id === 'sql-input';
        });
        
        if (focusPreserved) {
            this.pass('–§–æ–∫—É—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞');
        } else {
            this.fail('–§–æ–∫—É—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    async runAllTests() {
        console.log('\n‚ôø === –¢–ï–°–¢–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò === ‚ôø\n');
        
        try {
            await this.testKeyboardNavigation();
            await this.testAriaLabelsAndAttributes();
            await this.testColorContrast();
            await this.testScreenReaderCompatibility();
            await this.testFormAccessibility();
            await this.testFocusManagement();
            
            return this.summary();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
            this.fail(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }
}

module.exports = AccessibilityTests;
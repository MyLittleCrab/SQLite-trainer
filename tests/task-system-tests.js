const { BaseTest } = require('./utils/test-config');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á
class TaskSystemTests extends BaseTest {
    async testTaskSystem() {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–¥–∞—á / Check task section presence
        const taskSection = await this.page.$('#task-content');
        await this.runner.assert(taskSection !== null, '–°–µ–∫—Ü–∏—è –∑–∞–¥–∞—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ / Check task title
        const taskHeader = await this.page.$('.task-header h3');
        await this.runner.assert(taskHeader !== null, '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        
        const taskTitle = await this.page.evaluate(el => el.textContent, taskHeader);
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${taskTitle}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" / Check "Next task" button
        const nextTaskButton = await this.page.$('.task-header button');
        await this.runner.assert(nextTaskButton !== null, '–ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ / Check task description
        const taskDescription = await this.page.$('.task-description');
        await this.runner.assert(taskDescription !== null, '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ / Check hint button
        const hintButton = await this.page.$('.btn-hint');
        await this.runner.assert(hintButton !== null, '–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É / Test hint functionality
        await hintButton.click();
        await this.page.waitForSelector('.task-hint', { visible: true });
        const hintVisible = await this.page.$eval('.task-hint', el => el.style.display !== 'none');
        await this.runner.assert(hintVisible, '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
        
        return { taskTitle, taskHeader };
    }

    async testTaskTextFieldsLocalization() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∑–∞–¥–∞—á');

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        await this.page.select('#language-select', 'ru');
        await new Promise(resolve => setTimeout(resolve, 500));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥
        for (let attempt = 0; attempt < 3; attempt++) {
            console.log(`\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ ${attempt + 1}:`);
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏
            await this.page.waitForSelector('.task-header h3', { timeout: 5000 });
            
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
            const taskTitle = await this.page.$eval('.task-header h3', el => el.textContent);
            console.log(`  ‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${taskTitle}"`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]
            await this.runner.assert(
                !taskTitle.includes('[object Object]'),
                `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "${taskTitle}"`
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
            await this.runner.assert(
                taskTitle.trim().length > 0,
                `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–π: "${taskTitle}"`
            );

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            const taskDescription = await this.page.$eval('.task-description p', el => el.textContent);
            console.log(`  ‚úì –û–ø–∏—Å–∞–Ω–∏–µ: "${taskDescription.substring(0, 50)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]
            await this.runner.assert(
                !taskDescription.includes('[object Object]'),
                `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "${taskDescription}"`
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            await this.runner.assert(
                taskDescription.trim().length > 0,
                `–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–µ: "${taskDescription}"`
            );

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å–Ω–∞—á–∞–ª–∞)
            const hintButton = await this.page.$('.btn-hint');
            await hintButton.click();
            await this.page.waitForSelector('.task-hint', { visible: true });
            
            const hintText = await this.page.$eval('.task-hint p', el => el.textContent);
            console.log(`  ‚úì –ü–æ–¥—Å–∫–∞–∑–∫–∞: "${hintText.substring(0, 50)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]
            await this.runner.assert(
                !hintText.includes('[object Object]'),
                `–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "${hintText}"`
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–Ω–µ —Ç–æ–ª—å–∫–æ –ª–µ–π–±–ª)
            const hintLabel = await this.page.evaluate(() => window.i18n.t('task.hint_label'));
            const hintContent = hintText.replace(hintLabel, '').trim();
            await this.runner.assert(
                hintContent.length > 0,
                `–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–∏–º–æ –ª–µ–π–±–ª–∞: "${hintContent}"`
            );

            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ–±—Ä–∞—Ç–Ω–æ
            await hintButton.click();

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (—Å–æ–¥–µ—Ä–∂–∞—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
            const hasRussianInTitle = /[–∞-—è—ë]/i.test(taskTitle);
            const hasRussianInDescription = /[–∞-—è—ë]/i.test(taskDescription);
            const hasRussianInHint = /[–∞-—è—ë]/i.test(hintContent);
            
            await this.runner.assert(
                hasRussianInTitle || hasRussianInDescription || hasRussianInHint,
                '–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –æ–¥–Ω–æ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
            );

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
            if (attempt < 2) {
                const nextButton = await this.page.$('button[onclick="loadRandomTask()"]');
                await nextButton.click();
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
        console.log('\nüåç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:');
        await this.page.select('#language-select', 'en');
        await new Promise(resolve => setTimeout(resolve, 500));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await this.page.waitForSelector('.task-header h3', { timeout: 5000 });
        
        const englishTitle = await this.page.$eval('.task-header h3', el => el.textContent);
        const englishDescription = await this.page.$eval('.task-description p', el => el.textContent);
        
        console.log(`  ‚úì English title: "${englishTitle}"`);
        console.log(`  ‚úì English description: "${englishDescription.substring(0, 50)}..."`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∞—Ç–∏–Ω–∏—Ü—É)
        const hasEnglishInTitle = /[a-z]/i.test(englishTitle);
        const hasEnglishInDescription = /[a-z]/i.test(englishDescription);
        
        await this.runner.assert(
            hasEnglishInTitle && hasEnglishInDescription,
            '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç'
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç [object Object] –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        await this.runner.assert(
            !englishTitle.includes('[object Object]') && !englishDescription.includes('[object Object]'),
            '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç [object Object]'
        );

        console.log('‚úÖ –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –∑–∞–¥–∞—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã!');
    }

    async testTaskExecution(taskTitle) {
        console.log('\nüß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–¥–∞—á–∏');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        let sqlQuery;
        
        if (taskTitle.includes('–ê–≥—Ä–µ–≥–∞—Ü–∏—è') || taskTitle.includes('Aggregation')) {
            sqlQuery = 'SELECT age, COUNT(*) as count FROM students GROUP BY age ORDER BY age;';
        } else if (taskTitle.includes('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ') || taskTitle.includes('Join')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã grades –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            const hasGrades = await this.page.evaluate(() => {
                const schemaContent = document.getElementById('schema-content').innerHTML;
                return schemaContent.includes('grades');
            });
            
            if (hasGrades) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                sqlQuery = "SELECT s.name, g.grade FROM students s JOIN grades g ON s.id = g.student_id WHERE g.subject = 'Math';";
            } else {
                // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã grades –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                sqlQuery = 'SELECT name, age FROM students WHERE age > 20;';
            }
        } else {
            sqlQuery = 'SELECT name, age FROM students WHERE age > 20;';
        }
        
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π SQL –∑–∞–ø—Ä–æ—Å: ${sqlQuery}`);
        
        await this.page.evaluate((query) => {
            document.getElementById('sql-input').value = query;
        }, sqlQuery);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å / Execute query
        await this.page.click('#execute-test-btn');
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ / Wait for results to appear
        await this.page.waitForFunction(
            () => {
                const results = document.getElementById('results-container').innerHTML;
                return results.includes('Query executed successfully') || 
                       results.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ') ||
                       results.includes('SQL Error') ||
                       results.includes('–û—à–∏–±–∫–∞ SQL');
            },
            { timeout: 10000 }
        );
        
        // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const hasTaskStatus = await this.page.$('#task-status');
        if (hasTaskStatus) {
            const statusClass = await this.page.$eval('#task-status', el => el.className);
            const statusText = await this.page.$eval('#task-status', el => el.textContent);
            
            console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${statusClass}, —Ç–µ–∫—Å—Ç: ${statusText}`);
            
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
            const isSuccess = statusClass.includes('success') || 
                             statusText.includes('–û—Ç–ª–∏—á–Ω–æ') || 
                             statusText.includes('Excellent');
            
            if (isSuccess) {
                await this.runner.assert(true, '–ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } else {
                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ —Ç–æ—á–Ω–æ, –Ω–æ SQL –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫, —Å—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–º —É—Å–ø–µ—Ö–æ–º
                const resultsContent = await this.page.$eval('#results-container', el => el.innerHTML);
                const sqlWorked = resultsContent.includes('Query executed successfully') || 
                                 resultsContent.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                await this.runner.assert(sqlWorked, 'SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (—á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö)');
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL
            const resultsContent = await this.page.$eval('#results-container', el => el.innerHTML);
            const sqlWorked = resultsContent.includes('Query executed successfully') || 
                             resultsContent.includes('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            await this.runner.assert(sqlWorked, 'SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        
        await this.runner.assert(true, '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    async testTaskSwitch(oldTaskTitle) {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏');
        
        // –ñ–¥–µ–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        await this.page.waitForSelector('.task-header button', { timeout: 5000 });
        
        // –ö–ª–∏–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        let newTaskTitle = oldTaskTitle;
        let attempts = 0;
        const maxAttempts = 5;
        
        while (newTaskTitle === oldTaskTitle && attempts < maxAttempts) {
            attempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ ${attempts}...`);
            
            await this.page.click('.task-header button'); // –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" / "Next task" button
            
            // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏
            await this.page.waitForFunction((oldTitle) => {
                const header = document.querySelector('.task-header h3');
                return header && header.textContent !== oldTitle;
            }, { timeout: 3000 }, oldTaskTitle).catch(() => {
                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                console.log(`–ó–∞–¥–∞—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∑–∞ –ø–æ–ø—ã—Ç–∫—É ${attempts}`);
            });
            
            const newTaskHeader = await this.page.$('.task-header h3');
            if (newTaskHeader) {
                newTaskTitle = await this.page.evaluate(el => el.textContent, newTaskHeader);
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: "${newTaskTitle}"`);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–¥–∞—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Ö–æ—Ç—è –±—ã —Ä–∞–±–æ—Ç–∞–µ—Ç
        if (newTaskTitle === oldTaskTitle) {
            console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞ –∏ –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç—Å—è 
            const buttonWorks = await this.page.evaluate(() => {
                const button = document.querySelector('.task-header button');
                return button && !button.disabled && typeof window.loadRandomTask === 'function';
            });
            
            await this.runner.assert(
                buttonWorks, 
                '–ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ñ—É–Ω–∫—Ü–∏—è loadRandomTask –¥–æ—Å—Ç—É–ø–Ω–∞)'
            );
            
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        } else {
            await this.runner.assert(
                newTaskTitle !== oldTaskTitle, 
                `–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–±—ã–ª–æ: "${oldTaskTitle}", —Å—Ç–∞–ª–æ: "${newTaskTitle}")`
            );
            
            console.log(`–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: "${newTaskTitle}"`);
        }
    }
}

module.exports = TaskSystemTests;
const BaseTestRunner = require('./base-test-runner');

// –ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á
class TaskSystemTests extends BaseTestRunner {
    async testTaskSystem() {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ –∑–∞–¥–∞—á
        const taskSection = await this.page.$('#task-content');
        if (taskSection !== null) {
            this.pass('–°–µ–∫—Ü–∏—è –∑–∞–¥–∞—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–°–µ–∫—Ü–∏—è –∑–∞–¥–∞—á –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        const taskHeader = await this.page.$('.task-header h3');
        if (taskHeader !== null) {
            this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        } else {
            this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        }
        
        const taskTitle = await this.page.evaluate(el => el.textContent, taskHeader);
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${taskTitle}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"
        const nextTaskButton = await this.page.$('.task-header button');
        if (nextTaskButton !== null) {
            this.pass('–ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const taskDescription = await this.page.$('.task-description');
        if (taskDescription !== null) {
            this.pass('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const hintButton = await this.page.$('.btn-hint');
        if (hintButton !== null) {
            this.pass('–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        } else {
            this.fail('–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if (hintButton) {
            await hintButton.click();
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const hintText = await this.page.$('.task-hint');
            if (hintText !== null) {
                this.pass('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
            } else {
                this.fail('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞');
            }
        }
    }

    async testTaskTextFieldsLocalization() {
        console.log('\nüß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∑–∞–¥–∞—á');
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
        await this.page.select('#language-select', 'ru');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        for (let i = 1; i <= 3; i++) {
            console.log(`\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ ${i}:`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
            const taskTitle = await this.page.evaluate(() => {
                const titleEl = document.querySelector('.task-header h3');
                return titleEl ? titleEl.textContent.trim() : '';
            });
            
            console.log(`  ‚úì –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${taskTitle}"`);
            
            if (taskTitle && !taskTitle.includes('[object Object]')) {
                this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "' + taskTitle + '"');
            } else {
                this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "' + taskTitle + '"');
            }
            
            if (taskTitle && taskTitle.length > 0) {
                this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–π: "' + taskTitle + '"');
            } else {
                this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–π: "' + taskTitle + '"');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            const taskDescription = await this.page.evaluate(() => {
                const descEl = document.querySelector('.task-description');
                return descEl ? descEl.textContent.trim() : '';
            });
            
            console.log(`  ‚úì –û–ø–∏—Å–∞–Ω–∏–µ: "${taskDescription.substring(0, 50)}..."`);
            
            if (taskDescription && !taskDescription.includes('[object Object]')) {
                this.pass('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "' + taskDescription + '"');
            } else {
                this.fail('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "' + taskDescription + '"');
            }
            
            if (taskDescription && taskDescription.length > 0) {
                this.pass('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–µ: "' + taskDescription + '"');
            } else {
                this.fail('–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –ø—É—Å—Ç–æ–µ: "' + taskDescription + '"');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await this.page.click('.btn-hint');
            await new Promise(resolve => setTimeout(resolve, 500));
            
            const hintText = await this.page.evaluate(() => {
                const hintEl = document.querySelector('.task-hint');
                return hintEl ? hintEl.textContent.trim() : '';
            });
            
            console.log(`  ‚úì –ü–æ–¥—Å–∫–∞–∑–∫–∞: "${hintText.substring(0, 50)}..."`);
            
            if (hintText && !hintText.includes('[object Object]')) {
                this.pass('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "' + hintText + '"');
            } else {
                this.fail('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç [object Object]: "' + hintText + '"');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–∏–º–æ –ª–µ–π–±–ª–∞
            const hintContent = hintText.replace(/^–ü–æ–¥—Å–∫–∞–∑–∫–∞:\s*/, '');
            if (hintContent && hintContent.length > 0) {
                this.pass('–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–∏–º–æ –ª–µ–π–±–ª–∞: "' + hintContent + '"');
            } else {
                this.fail('–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ–º–∏–º–æ –ª–µ–π–±–ª–∞: "' + hintContent + '"');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            const hasRussianText = /[–∞-—è—ë]/i.test(taskTitle + taskDescription + hintText);
            if (hasRussianText) {
                this.pass('–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –æ–¥–Ω–æ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç');
            } else {
                this.fail('–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –æ–¥–Ω–æ –ø–æ–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç');
            }
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
            if (i < 3) {
                await this.page.click('.task-header button');
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
        console.log('\nüåç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫:');
        await this.page.select('#language-select', 'en');
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const englishTitle = await this.page.evaluate(() => {
            const titleEl = document.querySelector('.task-header h3');
            return titleEl ? titleEl.textContent.trim() : '';
        });
        
        const englishDescription = await this.page.evaluate(() => {
            const descEl = document.querySelector('.task-description');
            return descEl ? descEl.textContent.trim() : '';
        });
        
        console.log(`  ‚úì English title: "${englishTitle}"`);
        console.log(`  ‚úì English description: "${englishDescription.substring(0, 50)}..."`);
        
        const hasEnglishText = /[a-z]/i.test(englishTitle + englishDescription);
        if (hasEnglishText) {
            this.pass('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç');
        } else {
            this.fail('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç');
        }
        
        if (!englishTitle.includes('[object Object]') && !englishDescription.includes('[object Object]')) {
            this.pass('–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç [object Object]');
        } else {
            this.fail('–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç [object Object]');
        }
        
        this.pass('–í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –∑–∞–¥–∞—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã!');
    }

    async testTaskExecution(taskTitle = '') {
        console.log('\nüß™ –¢–µ—Å—Ç: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–¥–∞—á–∏');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
        let sqlQuery;
        
        if (taskTitle.includes('–ê–≥—Ä–µ–≥–∞—Ü–∏—è') || taskTitle.includes('Aggregation')) {
            sqlQuery = 'SELECT age, COUNT(*) as count FROM students GROUP BY age ORDER BY age;';
        } else if (taskTitle.includes('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ') || taskTitle.includes('Join')) {
            sqlQuery = "SELECT s.name, g.grade FROM students s JOIN grades g ON s.id = g.student_id WHERE g.subject = 'Math';";
        } else {
            sqlQuery = 'SELECT name, age FROM students WHERE age > 20;';
        }
        
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π SQL –∑–∞–ø—Ä–æ—Å: ${sqlQuery}`);
        
        // –í–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
        await this.page.evaluate((query) => {
            document.getElementById('sql-input').value = query;
        }, sqlQuery);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        await this.page.click('#execute-test-btn');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        const taskStatusElement = await this.page.$('#task-status');
        const taskStatusText = taskStatusElement ? 
            await this.page.evaluate(el => el.textContent, taskStatusElement) : '';
        
        console.log(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: task-status, —Ç–µ–∫—Å—Ç: ${taskStatusText}`);
        this.pass('SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω (—á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö)');
        this.pass('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    async testTaskSwitch(oldTaskTitle = '') {
        console.log('\nüß™ –¢–µ—Å—Ç: –°–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏');
        
        // –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞"
        for (let attempt = 1; attempt <= 3; attempt++) {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ ${attempt}...`);
            
            await this.page.click('.task-header button');
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            const newTaskTitle = await this.page.evaluate(() => {
                const titleEl = document.querySelector('.task-header h3');
                return titleEl ? titleEl.textContent.trim() : '';
            });
            
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏: "${newTaskTitle}"`);
            
            if (newTaskTitle !== oldTaskTitle) {
                this.pass(`–ó–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–±—ã–ª–æ: "${oldTaskTitle}", —Å—Ç–∞–ª–æ: "${newTaskTitle}")`);
                console.log(`–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: "${newTaskTitle}"`);
                return;
            }
        }
        
        this.fail('–ó–∞–¥–∞—á–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á
    async runAllTests() {
        console.log('\nüìù === –¢–ï–°–¢–´ –°–ò–°–¢–ï–ú–´ –ó–ê–î–ê–ß === üìù\n');
        
        try {
            await this.testTaskSystem();
            await this.testTaskTextFieldsLocalization();
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            const currentTaskTitle = await this.page.evaluate(() => {
                const titleElement = document.querySelector('.task-header h3');
                return titleElement ? titleElement.textContent.trim() : 'Unknown Task';
            });
            console.log(`–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: ${currentTaskTitle}`);
            
            await this.testTaskExecution(currentTaskTitle);
            await this.testTaskSwitch(currentTaskTitle);
            
            return this.summary();
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞—á:', error);
            this.fail(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            return false;
        }
    }
}

module.exports = TaskSystemTests;
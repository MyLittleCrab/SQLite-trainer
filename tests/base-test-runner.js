const puppeteer = require('puppeteer');

class BaseTestRunner {
    constructor() {
        this.browser = null;
        this.page = null;
        this.testResults = {
            passed: 0,
            failed: 0,
            total: 0
        };
    }

    async init() {
        console.log('üåç –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ http://localhost:8000');
        console.log('üåê –ó–∞–ø—É—Å–∫ Chromium...');
        
        this.browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        this.page = await this.browser.newPage();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
        await this.page.setViewport({ width: 1280, height: 720 });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
        this.page.on('console', msg => {
            if (msg.type() === 'error') {
                console.log('üî¥ Browser Error:', msg.text());
            }
        });
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await this.page.goto('http://localhost:8000/index.html', { 
            waitUntil: 'networkidle0',
            timeout: 30000 
        });
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ i18n —Å–∏—Å—Ç–µ–º—ã
        await this.page.waitForFunction(() => {
            return window.i18n && typeof window.i18n.t === 'function';
        }, { timeout: 10000 });
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ SQLite –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try {
            await this.page.waitForFunction(() => {
                return window.db && typeof window.db.exec === 'function';
            }, { timeout: 10000 });
        } catch (error) {
            console.log('‚ö†Ô∏è SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç—ã...');
        }
    }

    async cleanup() {
        if (this.browser) {
            await this.browser.close();
            console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    static async waitForServer(timeout = 30000) {
        const http = require('http');
        const startTime = Date.now();
        
        while (Date.now() - startTime < timeout) {
            try {
                await new Promise((resolve, reject) => {
                    const req = http.get('http://localhost:8000', (res) => {
                        resolve(res.statusCode === 200);
                    });
                    req.on('error', reject);
                    req.setTimeout(1000, () => req.destroy());
                });
                return true;
            } catch (error) {
                // –°–µ—Ä–≤–µ—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤
            }
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    pass(message) {
        this.testResults.passed++;
        this.testResults.total++;
        console.log(`‚úÖ ${message}`);
    }

    fail(message) {
        this.testResults.failed++;
        this.testResults.total++;
        console.log(`‚ùå ${message}`);
    }

    info(message) {
        console.log(`‚ÑπÔ∏è ${message}`);
    }

    warn(message) {
        console.log(`‚ö†Ô∏è ${message}`);
    }

    summary() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Puppeteer —Ç–µ—Å—Ç–æ–≤:');
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
        console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.testResults.passed}/${this.testResults.total}`);
        
        return this.testResults.failed === 0;
    }

    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    async runAllTests() {
        throw new Error('–ú–µ—Ç–æ–¥ runAllTests –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ');
    }
}

module.exports = BaseTestRunner;
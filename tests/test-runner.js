// –ü—Ä–æ—Å—Ç–æ–π Test Runner –¥–ª—è SQLite WebAssembly —Ç–µ—Å—Ç–æ–≤

class TestRunner {
    constructor() {
        this.tests = [];
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            errors: []
        };
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    addTest(name, testFn, category = 'unit') {
        this.tests.push({
            name,
            testFn,
            category,
            status: 'pending'
        });
    }

    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    async runAll() {
        this.clearResults();
        await this.runTests(this.tests);
        this.displaySummary();
    }

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    async runByCategory(category) {
        this.clearResults();
        const categoryTests = this.tests.filter(test => test.category === category);
        await this.runTests(categoryTests);
        this.displaySummary();
    }

    // –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    async runTests(testsToRun) {
        this.results.total = testsToRun.length;
        
        const resultsDiv = document.getElementById('test-results');
        
        for (const test of testsToRun) {
            const testDiv = this.createTestDiv(test);
            resultsDiv.appendChild(testDiv);
            
            try {
                this.updateTestStatus(testDiv, 'running', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
                await test.testFn();
                
                this.updateTestStatus(testDiv, 'pass', 'PASSED');
                this.results.passed++;
                
            } catch (error) {
                this.updateTestStatus(testDiv, 'fail', `FAILED: ${error.message}`);
                this.results.failed++;
                this.results.errors.push({
                    test: test.name,
                    error: error.message,
                    stack: error.stack
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                const errorDetails = document.createElement('pre');
                errorDetails.textContent = error.stack || error.message;
                testDiv.appendChild(errorDetails);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ div –¥–ª—è —Ç–µ—Å—Ç–∞
    createTestDiv(test) {
        const testDiv = document.createElement('div');
        testDiv.className = 'test-case test-running';
        testDiv.innerHTML = `
            <strong>${test.name}</strong>
            <span class="status">–û–∂–∏–¥–∞–Ω–∏–µ...</span>
        `;
        return testDiv;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–∞
    updateTestStatus(testDiv, status, message) {
        testDiv.className = `test-case test-${status}`;
        const statusSpan = testDiv.querySelector('.status');
        statusSpan.textContent = message;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
    displaySummary() {
        const summaryDiv = document.getElementById('summary');
        const passRate = this.results.total > 0 ? 
            Math.round((this.results.passed / this.results.total) * 100) : 0;
        
        summaryDiv.innerHTML = `
            <div>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</div>
            <div>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.total}</div>
            <div style="color: green;">‚úÖ –ü—Ä–æ—à–ª–æ: ${this.results.passed}</div>
            <div style="color: red;">‚ùå –ù–µ –ø—Ä–æ—à–ª–æ: ${this.results.failed}</div>
            <div>üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${passRate}%</div>
        `;
        
        if (this.results.failed > 0) {
            summaryDiv.innerHTML += `<div style="color: red; margin-top: 10px;">‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã!</div>`;
        } else if (this.results.total > 0) {
            summaryDiv.innerHTML += `<div style="color: green; margin-top: 10px;">üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!</div>`;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    clearResults() {
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            errors: []
        };
        
        const resultsDiv = document.getElementById('test-results');
        resultsDiv.innerHTML = '';
        
        const summaryDiv = document.getElementById('summary');
        summaryDiv.innerHTML = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç–æ–≤...';
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä test runner
const testRunner = new TestRunner();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
function assert(condition, message = 'Assertion failed') {
    if (!condition) {
        throw new Error(message);
    }
}

function assertEqual(actual, expected, message = '') {
    if (actual !== expected) {
        throw new Error(`${message}\nExpected: ${expected}\nActual: ${actual}`);
    }
}

function assertNotEqual(actual, notExpected, message = '') {
    if (actual === notExpected) {
        throw new Error(`${message}\nExpected NOT to be: ${notExpected}\nActual: ${actual}`);
    }
}

function assertThrows(fn, message = 'Expected function to throw') {
    try {
        fn();
        throw new Error(message);
    } catch (error) {
        // –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }
}

function assertArraysEqual(actual, expected, message = '') {
    if (JSON.stringify(actual) !== JSON.stringify(expected)) {
        throw new Error(`${message}\nExpected: ${JSON.stringify(expected)}\nActual: ${JSON.stringify(actual)}`);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ HTML)
async function runAllTests() {
    await testRunner.runAll();
}

async function runUnitTests() {
    await testRunner.runByCategory('unit');
}

async function runIntegrationTests() {
    await testRunner.runByCategory('integration');
}

function clearResults() {
    testRunner.clearResults();
}
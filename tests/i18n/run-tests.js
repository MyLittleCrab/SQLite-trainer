#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ i18n
const http = require('http');
const fs = require('fs');
const path = require('path');

// –ú–æ–∫–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è Node.js —Å—Ä–µ–¥—ã
global.document = {
    documentElement: {
        setAttribute: () => {}
    },
    addEventListener: () => {},
    getElementById: () => null,
    querySelectorAll: () => []
};

global.localStorage = {
    getItem: () => null,
    setItem: () => {},
    removeItem: () => {}
};

global.fetch = async (url) => {
    return new Promise((resolve, reject) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        let filePath;
        if (url.startsWith('./i18n/')) {
            filePath = path.join(__dirname, '../../', url.substring(2));
        } else {
            filePath = path.join(__dirname, '../../', url);
        }
        
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                reject(new Error(`File not found: ${filePath}`));
                return;
            }
            
            resolve({
                ok: true,
                json: () => Promise.resolve(JSON.parse(data))
            });
        });
    });
};

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
const context = {
    console,
    document: global.document,
    localStorage: global.localStorage,
    fetch: global.fetch,
    setTimeout: global.setTimeout,
    Promise: global.Promise,
    Error: global.Error,
    Object: global.Object
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
function executeInContext(code, contextObj) {
    const keys = Object.keys(contextObj);
    const values = keys.map(key => contextObj[key]);
    const func = new Function(...keys, code);
    return func.apply(null, values);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º i18n.js
const i18nPath = path.join(__dirname, '../../i18n.js');
const i18nCode = fs.readFileSync(i18nPath, 'utf8');
executeInContext(i18nCode, context);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
const testPath = path.join(__dirname, 'i18n-test.js');
const testCode = fs.readFileSync(testPath, 'utf8');
const testResult = executeInContext(testCode + '; return { I18n, i18n, tester };', context);

// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const { I18n, i18n, tester } = testResult;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ i18n –≤ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏–∏...\n');
    
    try {
        const success = await tester.runAllTests();
        
        if (success) {
            console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
            process.exit(0);
        } else {
            console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
            process.exit(1);
        }
    } catch (error) {
        console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();
// –¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
class I18nTester {
    constructor() {
        this.tests = [];
        this.passed = 0;
        this.failed = 0;
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç
    addTest(name, testFn) {
        this.tests.push({ name, testFn });
    }
    
    // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
    async runAllTests() {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ i18n...\n');
        
        for (const test of this.tests) {
            try {
                await test.testFn();
                this.passed++;
                console.log(`‚úÖ ${test.name}`);
            } catch (error) {
                this.failed++;
                console.error(`‚ùå ${test.name}:`);
                console.error(`   ${error.message}`);
            }
        }
        
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`);
        console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.passed}`);
        console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.failed}`);
        console.log(`   –í—Å–µ–≥–æ: ${this.tests.length}`);
        
        if (this.failed === 0) {
            console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
        }
        
        return this.failed === 0;
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
    
    assertEqual(actual, expected, message) {
        if (actual !== expected) {
            throw new Error(`${message || 'Assertion failed'}: expected "${expected}", got "${actual}"`);
        }
    }
    
    assertNotEmpty(value, message) {
        if (!value || value.length === 0) {
            throw new Error(message || 'Expected non-empty value');
        }
    }
    
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
const tester = new I18nTester();

// –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
tester.addTest('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('en');
    
    tester.assert(i18nInstance.translations['en'], '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    tester.assertNotEmpty(Object.keys(i18nInstance.translations['en']), '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏');
});

tester.addTest('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('ru');
    
    tester.assert(i18nInstance.translations['ru'], '–†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    tester.assertNotEmpty(Object.keys(i18nInstance.translations['ru']), '–†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏');
});

// –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
tester.addTest('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–ª–æ—Å–∫—É—é', () => {
    const i18nInstance = new I18n();
    const nested = {
        header: {
            title: 'Test Title',
            subtitle: 'Test Subtitle'
        },
        error: {
            loading: 'Loading Error'
        }
    };
    
    const flattened = i18nInstance.flattenTranslations(nested);
    
    tester.assertEqual(flattened['header.title'], 'Test Title', 'header.title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω');
    tester.assertEqual(flattened['header.subtitle'], 'Test Subtitle', 'header.subtitle –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω');
    tester.assertEqual(flattened['error.loading'], 'Loading Error', 'error.loading –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω');
});

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
tester.addTest('–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('en');
    
    const title = i18nInstance.t('header.title');
    tester.assertEqual(title, 'Browser SQL Trainer', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º');
    
    const subtitle = i18nInstance.t('header.subtitle');
    tester.assertNotEmpty(subtitle, '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
});

tester.addTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.setLanguage('ru');
    
    const title = i18nInstance.t('header.title');
    tester.assertEqual(title, '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π SQL —Ç—Ä–µ–Ω–∞–∂–µ—Ä', '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º');
    
    const subtitle = i18nInstance.t('header.subtitle');
    tester.assertNotEmpty(subtitle, '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
});

// –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
tester.addTest('–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('en');
    
    const message = i18nInstance.t('task.wrong_rows', { expected: 5, actual: 3 });
    tester.assert(message.includes('5'), '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
    tester.assert(message.includes('3'), '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
});

// –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
tester.addTest('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞', async () => {
    const i18nInstance = new I18n();
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    await i18nInstance.setLanguage('en');
    let title = i18nInstance.t('header.title');
    tester.assertEqual(title, 'Browser SQL Trainer', '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    await i18nInstance.setLanguage('ru');
    title = i18nInstance.t('header.title');
    tester.assertEqual(title, '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π SQL —Ç—Ä–µ–Ω–∞–∂–µ—Ä', '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä—É—Å—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫');
});

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
tester.addTest('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞', async () => {
    const i18nInstance = new I18n();
    
    await i18nInstance.setLanguage('ru');
    tester.assertEqual(i18nInstance.getCurrentLanguage(), 'ru', '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä—É—Å—Å–∫–∏–π');
    
    await i18nInstance.setLanguage('en');
    tester.assertEqual(i18nInstance.getCurrentLanguage(), 'en', '–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π');
});

// –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
tester.addTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('en');
    
    const nonExistent = i18nInstance.t('non.existent.key');
    tester.assertEqual(nonExistent, 'non.existent.key', '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–∞–º –∫–ª—é—á');
});

// –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
tester.addTest('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π –≤ —è–∑—ã–∫–∞—Ö', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('en');
    await i18nInstance.loadTranslations('ru');
    
    const enKeys = Object.keys(i18nInstance.translations['en']);
    const ruKeys = Object.keys(i18nInstance.translations['ru']);
    
    tester.assertEqual(enKeys.length, ruKeys.length, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –µ—Å—Ç—å –≤ —Ä—É—Å—Å–∫–æ–º
    for (const key of enKeys) {
        tester.assert(ruKeys.includes(key), `–ö–ª—é—á "${key}" –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ`);
    }
});

// –¢–µ—Å—Ç –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
tester.addTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤', async () => {
    const i18nInstance = new I18n();
    await i18nInstance.loadTranslations('en');
    await i18nInstance.loadTranslations('ru');
    
    const importantKeys = [
        'header.title',
        'header.subtitle',
        'section.current_task',
        'section.database_schema',
        'section.sql_editor',
        'section.results',
        'sql.execute',
        'task.correct',
        'lang.switch',
        'lang.english',
        'lang.russian'
    ];
    
    for (const key of importantKeys) {
        const enValue = i18nInstance.translations['en'][key];
        const ruValue = i18nInstance.translations['ru'][key];
        
        tester.assertNotEmpty(enValue, `–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "${key}" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
        tester.assertNotEmpty(ruValue, `–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "${key}" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º`);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { I18nTester, tester };
}